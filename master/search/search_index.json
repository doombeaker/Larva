{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"","title":"\u9996\u9875"},{"location":"github/01_how_to_pr.html","text":"\u5982\u4f55\u63d0\u4ea4 PR \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u5982\u4f55\u63d0\u4ea4 PR \u4ec0\u4e48\u662f PR \u00b6 GitHub \u4e0a\u4e00\u822c\u901a\u8fc7\u63d0\u4ea4 PR\uff08Pull Request\uff09\u7684\u65b9\u5f0f\uff0c\u50cf\u5f00\u6e90\u9879\u76ee\u5408\u5e76\u4ee3\u7801\u3002 \u5982\u4f55\u8fd8\u6ca1\u6709\u53c2\u4e0e\u8fc7\u5f00\u6e90\u9879\u76ee\u63d0\u4ea4\u8fc7 PR\uff0c\u53ef\u4ee5\u770b\u770b\u672c\u6587\u5c0f\u7cd6\u4ee5 OneFlow\uff08\u5927\u4f6c\uff09 \u4e3a\u4f8b\uff0c\u5982\u4f55\u63d0\u4ea4 PR\u3002 \u4e00\u5171\u6709\u4e00\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a fork \u4ed3\u5e93 \u62c9\u53d6\u6700\u65b0\u4ee3\u7801 \u521b\u5efa\u65b0\u5206\u652f\u5e76\u5728\u65b0\u5206\u652f\u4e0a\u4fee\u6539\u3001commit \u5c06\u5206\u652f\u63a8\u9001\u5230 GitHub \u63d0\u4ea4 PR 1. fork\u4ed3\u5e93 \u00b6 \u53c2\u4e0e\u5f00\u6e90\u9879\u76ee\u7684\u7b2c\u4e00\u6b65\u901a\u5e38\u662f fork \u4ed3\u5e93\uff0c\u5b83\u7684\u610f\u4e49\u7b80\u5355\u800c\u8a00\u5c31\u662f\u590d\u5236\u4e00\u4efd\u4ee3\u7801\u5230\u81ea\u5df1\u7684\u8d26\u53f7\u4e0b\u3002 \u4ee5 OneFlow-Inc/oneflow \u4e3a\u4f8b\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 fork \u6309\u94ae\u3002 \u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u5728\u81ea\u5df1\u7684\u8d26\u53f7\u4e0b\uff0c\u6709 oneflow \u4ed3\u5e93\u5566\u3002 2. \u62c9\u53d6\u6700\u65b0\u4ee3\u7801 \u00b6 \u63a5\u7740\uff0c\u5c06\u6211\u4eec\u8d26\u53f7\u4e0b\u7684\u4ed3\u5e93\uff0c\u514b\u9686\u4e00\u4efd\u5230\u672c\u5730\uff0c\u65b9\u4fbf\u4fee\u6539\u548c\u63d0\u4ea4\u4ee3\u7801\u3002 \u9996\u5148\u590d\u5236\u4ed3\u5e93\u540d\uff1a\u5728\u81ea\u5df1\u8d26\u53f7\u4e0b\u7684 oneflow \u4ed3\u5e93\u9875\u9762\u83b7\u53d6\u4ed3\u5e93\u5730\u5740 \u63a5\u7740\u514b\u9686\u5230\u672c\u5730\uff0c\u6253\u5f00\u63a7\u5236\u53f0\uff1a git clone https://github.com/ttttLarva/oneflow.git \u4ee5\u4e0a\u7684 https://github.com/ttttLarva/oneflow.git \u662f\u5c0f\u7cd6\u7684\u8d26\u53f7\u4e0b\u7684\u5730\u5740\uff0c\u8bb0\u5f97\u66ff\u6362\u6210\u4f60\u81ea\u5df1\u5bf9\u5e94\u7684\u4ed3\u5e93\u54e6\u3002 3. \u521b\u5efa\u65b0\u5206\u652f \u00b6 \u5728\u6700\u65b0\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\uff0c\u901a\u8fc7 git checkout -b \u547d\u4ee4\uff0c\u521b\u5efa\u65b0\u7684\u5206\u652f\u3002\u5e76\u5728\u8fd9\u4e2a\u65b0\u5206\u652f\u4e0a\u8fdb\u884c\u4fee\u6539\u548c commit \u4ee3\u7801\u3002 git checkout -b new_branch \u4ee5\u4e0a\u7684 new_branch \u5c31\u662f\u65b0\u5206\u652f\u540d\u3002\u8be5\u547d\u4ee4\u4f1a\u521b\u5efa new_branch \u5206\u652f\u5e76\u5207\u6362\u5230\u8fd9\u4e2a\u65b0\u5206\u652f\u4e0a\u3002 \u4fee\u6539\u6587\u4ef6\u5e76\u63d0\u4ea4\u4ee3\u7801 git add . git commit 4. \u63a8\u9001\u5230github \u00b6 \u63d0\u4ea4\u5230\u672c\u5730\u4ed3\u5e93\u6210\u529f\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u8981\u5c06\u6539\u52a8\u63d0\u4ea4\u5230\u8fdc\u7a0b\u4ed3\u5e93\u5566\uff0c\u4f7f\u7528\u547d\u4ee4\uff1a git push origin new_branch \u5176\u5b9e origin \u5c31\u662f\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740\uff08 https://github.com/ttttLarva/oneflow.git \uff09\u7684\u522b\u540d\uff0c new_branch \u662f\u8fdc\u7a0b\u4ed3\u5e93\u5206\u652f\u540d\uff0c\u5f3a\u70c8\u5efa\u8bae\u4e0e\u672c\u5730\u5206\u652f\u540d\u4fdd\u6301\u4e00\u81f4\u3002 5. \u521b\u5efa PR \u00b6 \u5728\u7b2c\u4e00\u6b21 push \u5230\u8fdc\u7a0b\u4ed3\u5e93\u6210\u529f\u540e\uff0c\u63a7\u5236\u53f0\u4f1a\u51fa\u73b0\u4e00\u4e2a\u94fe\u63a5\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u94fe\u63a5\u590d\u5236\u5230\u6d4f\u89c8\u5668\u6253\u5f00\uff0c\u5c31\u53ef\u4ee5\u8df3\u8f6c\u5230\u521b\u5efaPR\u7684\u754c\u9762\uff1a \u4ee5\u4e0a\u5de6\u8fb9\u7ea2\u8272\uff1a\u4ee3\u8868\u6211\u4eec\u8981\u60f3\u8981\u628a\u8fd9\u4e2a\u6539\u52a8\u5408\u5e76\u5230 OneFlow \u7684\u54ea\u4e00\u4e2a\u5206\u652f \u4ee5\u4e0a\u53f3\u8fb9\u84dd\u8272\uff1a\u4ee3\u8868\u6211\u4eec\u524d\u9762\u6539\u52a8\u7684\u5206\u652f \u63a5\u7740\u5c31\u662f\u4e00\u4e9b\u4fe1\u606f\u586b\u5199\u5566\uff0c\u5199\u597d\u6807\u9898\u548c\u5bf9\u8fd9\u7b14\u6539\u52a8\u7684\u63cf\u8ff0\uff0c\u70b9\u51fb Create \u6309\u94ae\uff0cPR \u5c31\u521b\u5efa\u6210\u529f\u4e86\u3002 \u6700\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 OneFlow \u7684\u4ed3\u5e93\u4e0b\u770b\u5230\u6211\u4eec\u63d0\u4ea4\u7684PR\u5566 \u6269\u5c55\u9605\u8bfb \u00b6 GitHub \u5b98\u7f51\uff1aCollaborate with pull requests Git \u57fa\u672c\u64cd\u4f5c\u5b98\u65b9\u6587\u6863","title":"\u5982\u4f55\u63d0\u4ea4 PR"},{"location":"github/01_how_to_pr.html#pr","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u5982\u4f55\u63d0\u4ea4 PR","title":"\u5982\u4f55\u63d0\u4ea4 PR"},{"location":"github/01_how_to_pr.html#pr_1","text":"GitHub \u4e0a\u4e00\u822c\u901a\u8fc7\u63d0\u4ea4 PR\uff08Pull Request\uff09\u7684\u65b9\u5f0f\uff0c\u50cf\u5f00\u6e90\u9879\u76ee\u5408\u5e76\u4ee3\u7801\u3002 \u5982\u4f55\u8fd8\u6ca1\u6709\u53c2\u4e0e\u8fc7\u5f00\u6e90\u9879\u76ee\u63d0\u4ea4\u8fc7 PR\uff0c\u53ef\u4ee5\u770b\u770b\u672c\u6587\u5c0f\u7cd6\u4ee5 OneFlow\uff08\u5927\u4f6c\uff09 \u4e3a\u4f8b\uff0c\u5982\u4f55\u63d0\u4ea4 PR\u3002 \u4e00\u5171\u6709\u4e00\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a fork \u4ed3\u5e93 \u62c9\u53d6\u6700\u65b0\u4ee3\u7801 \u521b\u5efa\u65b0\u5206\u652f\u5e76\u5728\u65b0\u5206\u652f\u4e0a\u4fee\u6539\u3001commit \u5c06\u5206\u652f\u63a8\u9001\u5230 GitHub \u63d0\u4ea4 PR","title":"\u4ec0\u4e48\u662f PR"},{"location":"github/01_how_to_pr.html#1-fork","text":"\u53c2\u4e0e\u5f00\u6e90\u9879\u76ee\u7684\u7b2c\u4e00\u6b65\u901a\u5e38\u662f fork \u4ed3\u5e93\uff0c\u5b83\u7684\u610f\u4e49\u7b80\u5355\u800c\u8a00\u5c31\u662f\u590d\u5236\u4e00\u4efd\u4ee3\u7801\u5230\u81ea\u5df1\u7684\u8d26\u53f7\u4e0b\u3002 \u4ee5 OneFlow-Inc/oneflow \u4e3a\u4f8b\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 fork \u6309\u94ae\u3002 \u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u5728\u81ea\u5df1\u7684\u8d26\u53f7\u4e0b\uff0c\u6709 oneflow \u4ed3\u5e93\u5566\u3002","title":"1. fork\u4ed3\u5e93"},{"location":"github/01_how_to_pr.html#2","text":"\u63a5\u7740\uff0c\u5c06\u6211\u4eec\u8d26\u53f7\u4e0b\u7684\u4ed3\u5e93\uff0c\u514b\u9686\u4e00\u4efd\u5230\u672c\u5730\uff0c\u65b9\u4fbf\u4fee\u6539\u548c\u63d0\u4ea4\u4ee3\u7801\u3002 \u9996\u5148\u590d\u5236\u4ed3\u5e93\u540d\uff1a\u5728\u81ea\u5df1\u8d26\u53f7\u4e0b\u7684 oneflow \u4ed3\u5e93\u9875\u9762\u83b7\u53d6\u4ed3\u5e93\u5730\u5740 \u63a5\u7740\u514b\u9686\u5230\u672c\u5730\uff0c\u6253\u5f00\u63a7\u5236\u53f0\uff1a git clone https://github.com/ttttLarva/oneflow.git \u4ee5\u4e0a\u7684 https://github.com/ttttLarva/oneflow.git \u662f\u5c0f\u7cd6\u7684\u8d26\u53f7\u4e0b\u7684\u5730\u5740\uff0c\u8bb0\u5f97\u66ff\u6362\u6210\u4f60\u81ea\u5df1\u5bf9\u5e94\u7684\u4ed3\u5e93\u54e6\u3002","title":"2. \u62c9\u53d6\u6700\u65b0\u4ee3\u7801"},{"location":"github/01_how_to_pr.html#3","text":"\u5728\u6700\u65b0\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\uff0c\u901a\u8fc7 git checkout -b \u547d\u4ee4\uff0c\u521b\u5efa\u65b0\u7684\u5206\u652f\u3002\u5e76\u5728\u8fd9\u4e2a\u65b0\u5206\u652f\u4e0a\u8fdb\u884c\u4fee\u6539\u548c commit \u4ee3\u7801\u3002 git checkout -b new_branch \u4ee5\u4e0a\u7684 new_branch \u5c31\u662f\u65b0\u5206\u652f\u540d\u3002\u8be5\u547d\u4ee4\u4f1a\u521b\u5efa new_branch \u5206\u652f\u5e76\u5207\u6362\u5230\u8fd9\u4e2a\u65b0\u5206\u652f\u4e0a\u3002 \u4fee\u6539\u6587\u4ef6\u5e76\u63d0\u4ea4\u4ee3\u7801 git add . git commit","title":"3. \u521b\u5efa\u65b0\u5206\u652f"},{"location":"github/01_how_to_pr.html#4-github","text":"\u63d0\u4ea4\u5230\u672c\u5730\u4ed3\u5e93\u6210\u529f\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u8981\u5c06\u6539\u52a8\u63d0\u4ea4\u5230\u8fdc\u7a0b\u4ed3\u5e93\u5566\uff0c\u4f7f\u7528\u547d\u4ee4\uff1a git push origin new_branch \u5176\u5b9e origin \u5c31\u662f\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740\uff08 https://github.com/ttttLarva/oneflow.git \uff09\u7684\u522b\u540d\uff0c new_branch \u662f\u8fdc\u7a0b\u4ed3\u5e93\u5206\u652f\u540d\uff0c\u5f3a\u70c8\u5efa\u8bae\u4e0e\u672c\u5730\u5206\u652f\u540d\u4fdd\u6301\u4e00\u81f4\u3002","title":"4. \u63a8\u9001\u5230github"},{"location":"github/01_how_to_pr.html#5-pr","text":"\u5728\u7b2c\u4e00\u6b21 push \u5230\u8fdc\u7a0b\u4ed3\u5e93\u6210\u529f\u540e\uff0c\u63a7\u5236\u53f0\u4f1a\u51fa\u73b0\u4e00\u4e2a\u94fe\u63a5\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u94fe\u63a5\u590d\u5236\u5230\u6d4f\u89c8\u5668\u6253\u5f00\uff0c\u5c31\u53ef\u4ee5\u8df3\u8f6c\u5230\u521b\u5efaPR\u7684\u754c\u9762\uff1a \u4ee5\u4e0a\u5de6\u8fb9\u7ea2\u8272\uff1a\u4ee3\u8868\u6211\u4eec\u8981\u60f3\u8981\u628a\u8fd9\u4e2a\u6539\u52a8\u5408\u5e76\u5230 OneFlow \u7684\u54ea\u4e00\u4e2a\u5206\u652f \u4ee5\u4e0a\u53f3\u8fb9\u84dd\u8272\uff1a\u4ee3\u8868\u6211\u4eec\u524d\u9762\u6539\u52a8\u7684\u5206\u652f \u63a5\u7740\u5c31\u662f\u4e00\u4e9b\u4fe1\u606f\u586b\u5199\u5566\uff0c\u5199\u597d\u6807\u9898\u548c\u5bf9\u8fd9\u7b14\u6539\u52a8\u7684\u63cf\u8ff0\uff0c\u70b9\u51fb Create \u6309\u94ae\uff0cPR \u5c31\u521b\u5efa\u6210\u529f\u4e86\u3002 \u6700\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 OneFlow \u7684\u4ed3\u5e93\u4e0b\u770b\u5230\u6211\u4eec\u63d0\u4ea4\u7684PR\u5566","title":"5. \u521b\u5efa PR"},{"location":"github/01_how_to_pr.html#_1","text":"GitHub \u5b98\u7f51\uff1aCollaborate with pull requests Git \u57fa\u672c\u64cd\u4f5c\u5b98\u65b9\u6587\u6863","title":"\u6269\u5c55\u9605\u8bfb"},{"location":"github/02_learn_from_pr.html","text":"\u5982\u4f55\u901a\u8fc7 PR \u5b66\u4e60 & VS Code\u597d\u7528\u63d2\u4ef6\u5206\u4eab \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u901a\u8fc7PR\u5b66\u4e60&VS Code\u63d2\u4ef6\u5206\u4eab \u5982\u4f55\u901a\u8fc7 PR \u5b66\u4e60 \u00b6 \u4eca\u5929\u7ed9\u5927\u5bb6\u5206\u4eab\u7684\u662f\u5982\u4f55\u5728github\u4e0a\u901a\u8fc7\u641c\u7d22PR(pull requests)\u8fdb\u884c\u81ea\u6211\u80fd\u529b\u7684\u62d3\u5c55\u3002 \u9996\u5148\u5c31\u8981\u5b66\u4f1a\u8bfbPR\uff0c\u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u7684PR\u4e3a\u4f8b\u5b50\uff0c\u6765\u8bf4\u660ePR\u7684\u5404\u4e2a\u5b57\u6bb5\uff0c\u5e76\u600e\u4e48\u901a\u8fc7PR\u5b66\u4e60\u3002 PR\u5206\u4e3a\u4e24\u7c7b\uff1a Open\uff1a\u6b63\u5728\u5408\u5e76\uff0c\u8fd8\u5728\u8bc4\u5ba1\u7684PR Clode\uff1a\u5df2\u7ecf\u5408\u5e76\uff0c\u6216\u8005\u653e\u5f03\u5408\u5e76\u7684PR PR\u6807\u9898\u8fb9\u7684\u5f69\u8272\u6807\u7b7e\uff0c\u662f\u5bf9\u8fd9\u4e2aPR\u7684\u7b80\u5355\u5206\u7c7b\u3002 github\u8fd8\u81ea\u5e26\u4e86\u591a\u79cd\u641c\u7d22\u529f\u80fd\uff0c\u6bd4\u5982\u53ef\u4ee5\u7b5b\u9009\u67d0\u4e2a\u611f\u5174\u8da3\u7684\u4f5c\u8005\u63d0\u4ea4\u7684PR \u90a3\u4e48\u5177\u4f53\u5982\u4f55\u901a\u8fc7PR\u8fdb\u884c\u5b66\u4e60\u5462\uff1f \u8fdb\u5165PR\u8be6\u60c5\u754c\u9762 Conversation\uff1a\u8fd9\u4e00\u680f\u7684\u4e3b\u8d34\uff0c\u4e00\u822c\u4f1a\u63cf\u8ff0\u8fd9\u4e2aPR\u6539\u52a8\u7684\u539f\u56e0\u3001\u529f\u80fd\u7136\u540ereviewer\u4f1a\u8bc4\u5ba1\u8be5PR\u3002reviewer\u5408PR\u4f5c\u8005\u4f1a\u5728\u8fd9\u91cc\u5c55\u5f00\u5bf9\u8bdd\u8ba8\u8bba Files Changed\uff1a\u5305\u542b\u4e86\u8be5PR\u7684\u6539\u52a8\u9879\uff0c\u7ea2\u8272\u662fPR\u4f5c\u8005\u5220\u9664\u7684\u5185\u5bb9\uff0c\u7eff\u8272\u662f\u65b0\u589e\u7684\u5185\u5bb9 \u8d85\u597d\u7528\u7684vs\u63d2\u4ef6\u5206\u4eab \u00b6 \u5982\u679c\u8981\u6bcf\u6b21\u90fd\u70b9\u5f00github\u4ed3\u5e93\uff0c\u518d\u5bf9PR\u8fdb\u884c\u5b66\u4e60\uff0c\u53ef\u80fd\u4e0d\u662f\u5f88\u4fbf\u6377\uff1b\u56e0\u6b64\u63a8\u8350\u4e00\u4e2avscode\u63d2\u4ef6\uff0c\u53ef\u4ee5\u5728\u672c\u5730\u4ed3\u5e93\u5c31\u8ba9\u6211\u4eec\u67e5\u770b\u5230PR\u3002 \u5f3a\u70c8\u63a8\u8350\uff1a Git History Diff \u63d2\u4ef6 \u5177\u4f53\u6709\u591a\u597d\u7528\u5462\uff1f\u53bb\u770b\u770b\u89c6\u9891\u540e\uff0c\u5927\u5bb6\u5feb\u5feb\u52a8\u624b\u4e0b\u8f7d\u4e0b\u6765\u8bd5\u8bd5\u5427~","title":"\u5982\u4f55\u901a\u8fc7 PR \u5b66\u4e60"},{"location":"github/02_learn_from_pr.html#pr-vs-code","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u901a\u8fc7PR\u5b66\u4e60&VS Code\u63d2\u4ef6\u5206\u4eab","title":"\u5982\u4f55\u901a\u8fc7 PR \u5b66\u4e60 &amp; VS Code\u597d\u7528\u63d2\u4ef6\u5206\u4eab"},{"location":"github/02_learn_from_pr.html#pr","text":"\u4eca\u5929\u7ed9\u5927\u5bb6\u5206\u4eab\u7684\u662f\u5982\u4f55\u5728github\u4e0a\u901a\u8fc7\u641c\u7d22PR(pull requests)\u8fdb\u884c\u81ea\u6211\u80fd\u529b\u7684\u62d3\u5c55\u3002 \u9996\u5148\u5c31\u8981\u5b66\u4f1a\u8bfbPR\uff0c\u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u7684PR\u4e3a\u4f8b\u5b50\uff0c\u6765\u8bf4\u660ePR\u7684\u5404\u4e2a\u5b57\u6bb5\uff0c\u5e76\u600e\u4e48\u901a\u8fc7PR\u5b66\u4e60\u3002 PR\u5206\u4e3a\u4e24\u7c7b\uff1a Open\uff1a\u6b63\u5728\u5408\u5e76\uff0c\u8fd8\u5728\u8bc4\u5ba1\u7684PR Clode\uff1a\u5df2\u7ecf\u5408\u5e76\uff0c\u6216\u8005\u653e\u5f03\u5408\u5e76\u7684PR PR\u6807\u9898\u8fb9\u7684\u5f69\u8272\u6807\u7b7e\uff0c\u662f\u5bf9\u8fd9\u4e2aPR\u7684\u7b80\u5355\u5206\u7c7b\u3002 github\u8fd8\u81ea\u5e26\u4e86\u591a\u79cd\u641c\u7d22\u529f\u80fd\uff0c\u6bd4\u5982\u53ef\u4ee5\u7b5b\u9009\u67d0\u4e2a\u611f\u5174\u8da3\u7684\u4f5c\u8005\u63d0\u4ea4\u7684PR \u90a3\u4e48\u5177\u4f53\u5982\u4f55\u901a\u8fc7PR\u8fdb\u884c\u5b66\u4e60\u5462\uff1f \u8fdb\u5165PR\u8be6\u60c5\u754c\u9762 Conversation\uff1a\u8fd9\u4e00\u680f\u7684\u4e3b\u8d34\uff0c\u4e00\u822c\u4f1a\u63cf\u8ff0\u8fd9\u4e2aPR\u6539\u52a8\u7684\u539f\u56e0\u3001\u529f\u80fd\u7136\u540ereviewer\u4f1a\u8bc4\u5ba1\u8be5PR\u3002reviewer\u5408PR\u4f5c\u8005\u4f1a\u5728\u8fd9\u91cc\u5c55\u5f00\u5bf9\u8bdd\u8ba8\u8bba Files Changed\uff1a\u5305\u542b\u4e86\u8be5PR\u7684\u6539\u52a8\u9879\uff0c\u7ea2\u8272\u662fPR\u4f5c\u8005\u5220\u9664\u7684\u5185\u5bb9\uff0c\u7eff\u8272\u662f\u65b0\u589e\u7684\u5185\u5bb9","title":"\u5982\u4f55\u901a\u8fc7 PR \u5b66\u4e60"},{"location":"github/02_learn_from_pr.html#vs","text":"\u5982\u679c\u8981\u6bcf\u6b21\u90fd\u70b9\u5f00github\u4ed3\u5e93\uff0c\u518d\u5bf9PR\u8fdb\u884c\u5b66\u4e60\uff0c\u53ef\u80fd\u4e0d\u662f\u5f88\u4fbf\u6377\uff1b\u56e0\u6b64\u63a8\u8350\u4e00\u4e2avscode\u63d2\u4ef6\uff0c\u53ef\u4ee5\u5728\u672c\u5730\u4ed3\u5e93\u5c31\u8ba9\u6211\u4eec\u67e5\u770b\u5230PR\u3002 \u5f3a\u70c8\u63a8\u8350\uff1a Git History Diff \u63d2\u4ef6 \u5177\u4f53\u6709\u591a\u597d\u7528\u5462\uff1f\u53bb\u770b\u770b\u89c6\u9891\u540e\uff0c\u5927\u5bb6\u5feb\u5feb\u52a8\u624b\u4e0b\u8f7d\u4e0b\u6765\u8bd5\u8bd5\u5427~","title":"\u8d85\u597d\u7528\u7684vs\u63d2\u4ef6\u5206\u4eab"},{"location":"github/03_SSH_for_github.html","text":"github SSH\u514d\u5bc6\u7801\u767b\u5f55 \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a github SSH\u514d\u5bc6\u7801\u767b\u5f55 \u4ec0\u4e48\u662fSSH \u00b6 \u5982\u4e0a\u56fe\uff0c\u5728github\u4ed3\u5e93\u7684Code\u680f\uff0c\u53ef\u4ee5\u67e5\u770b\u5230SSH\u6807\u7b7e\u3002 SSH\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u767b\u5f55\u534f\u8bae\uff0c\u4f7f\u7528SSH\u7684\u597d\u5904\u662f\u4e0d\u7528\u5728\u4e0b\u8f7d\u6216\u8005\u4e0a\u4f20\u4ee3\u7801\u65f6\uff0c\u6bcf\u6b21\u90fd\u8f93\u5165\u8d26\u53f7\u5bc6\u7801\u3002 \u914d\u7f6eSSH\u8fde\u63a5github \u00b6 \u5177\u4f53\u53ef\u53c2\u8003https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh \u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u672c\u5730\u751f\u6210\u5bc6\u94a5\u5bf9 \u5c06\u516c\u94a5\u6dfb\u52a0\u5230github \u6d4b\u8bd5\u4f7f\u7528 \u672c\u5730\u751f\u6210\u5bc6\u94a5\u5bf9 \u00b6 win+R\u6253\u5f00\u63a7\u5236\u53f0\uff0c\u4f7f\u7528\u547d\u4ee4\uff1a ssh-keygen -t rsa -b 4096 -C \"\u6700\u597d\u4e3agithub\u7684\u8d26\u53f7\" \u540e\u9762\u4e00\u8def\u76f4\u63a5\u56de\u8f66 \u63a5\u7740\u5c31\u5728\uff08\u7528\u6237/.ssh\uff09\u76ee\u5f55\u4e0b\u751f\u6210\u4e86\u4e24\u4e2a\u6587\u4ef6 id_rsa\u662f\u79c1\u94a5\u6587\u4ef6 id_rsa.pub\u662f\u516c\u94a5\u6587\u4ef6 \u5c06\u516c\u94a5\u6dfb\u52a0\u5230github \u00b6 \u6253\u5f00github\uff0c\u70b9\u51fb\u4e2a\u4eba\u9875\u9762\u7684\u5934\u50cf\uff0c\u70b9\u51fb Settings \u70b9\u51fb SSH and GPG keys \u70b9\u51fb New SSH Key \u6253\u5f00\u7b2c\u4e8c\u6b65\u5728\u672c\u5730\u751f\u6210\u7684 id_rsa.pub \u6587\u4ef6\uff0c\u5c06\u91cc\u9762\u7684\u6240\u6709\u5185\u5bb9\u590d\u5236\u5230\u5982\u4e0b\u5bf9\u8bdd\u6846\u3002 \u6700\u7ec8\u70b9\u51fb Add SSH Key \u6309\u94ae \u5c31\u80fd\u6210\u529f\u6dfb\u52a0\u5566 \u6d4b\u8bd5\u4f7f\u7528 \u00b6 \u63a5\u7740\u4f7f\u7528\u547d\u4ee4\uff1a ssh -T git@github.com \u68c0\u9a8c\u662f\u5426\u914d\u7f6e\u6210\u529f \u6ce8\u610f\uff1a\u7b2c\u4e00\u6b21\u8fde\u63a5\uff0c\u4f1a\u6709\u63d0\u793a\u662f\u5426\u4fe1\u4efbgithub\u670d\u52a1\u5668\uff0c\u6211\u4eec\u9700\u8981\u8f93\u5165yes","title":"github SSH\u514d\u5bc6\u7801\u767b\u5f55\u8bbe\u7f6e"},{"location":"github/03_SSH_for_github.html#github-ssh","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a github SSH\u514d\u5bc6\u7801\u767b\u5f55","title":"github SSH\u514d\u5bc6\u7801\u767b\u5f55"},{"location":"github/03_SSH_for_github.html#ssh","text":"\u5982\u4e0a\u56fe\uff0c\u5728github\u4ed3\u5e93\u7684Code\u680f\uff0c\u53ef\u4ee5\u67e5\u770b\u5230SSH\u6807\u7b7e\u3002 SSH\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u767b\u5f55\u534f\u8bae\uff0c\u4f7f\u7528SSH\u7684\u597d\u5904\u662f\u4e0d\u7528\u5728\u4e0b\u8f7d\u6216\u8005\u4e0a\u4f20\u4ee3\u7801\u65f6\uff0c\u6bcf\u6b21\u90fd\u8f93\u5165\u8d26\u53f7\u5bc6\u7801\u3002","title":"\u4ec0\u4e48\u662fSSH"},{"location":"github/03_SSH_for_github.html#sshgithub","text":"\u5177\u4f53\u53ef\u53c2\u8003https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh \u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u672c\u5730\u751f\u6210\u5bc6\u94a5\u5bf9 \u5c06\u516c\u94a5\u6dfb\u52a0\u5230github \u6d4b\u8bd5\u4f7f\u7528","title":"\u914d\u7f6eSSH\u8fde\u63a5github"},{"location":"github/03_SSH_for_github.html#_1","text":"win+R\u6253\u5f00\u63a7\u5236\u53f0\uff0c\u4f7f\u7528\u547d\u4ee4\uff1a ssh-keygen -t rsa -b 4096 -C \"\u6700\u597d\u4e3agithub\u7684\u8d26\u53f7\" \u540e\u9762\u4e00\u8def\u76f4\u63a5\u56de\u8f66 \u63a5\u7740\u5c31\u5728\uff08\u7528\u6237/.ssh\uff09\u76ee\u5f55\u4e0b\u751f\u6210\u4e86\u4e24\u4e2a\u6587\u4ef6 id_rsa\u662f\u79c1\u94a5\u6587\u4ef6 id_rsa.pub\u662f\u516c\u94a5\u6587\u4ef6","title":"\u672c\u5730\u751f\u6210\u5bc6\u94a5\u5bf9"},{"location":"github/03_SSH_for_github.html#github","text":"\u6253\u5f00github\uff0c\u70b9\u51fb\u4e2a\u4eba\u9875\u9762\u7684\u5934\u50cf\uff0c\u70b9\u51fb Settings \u70b9\u51fb SSH and GPG keys \u70b9\u51fb New SSH Key \u6253\u5f00\u7b2c\u4e8c\u6b65\u5728\u672c\u5730\u751f\u6210\u7684 id_rsa.pub \u6587\u4ef6\uff0c\u5c06\u91cc\u9762\u7684\u6240\u6709\u5185\u5bb9\u590d\u5236\u5230\u5982\u4e0b\u5bf9\u8bdd\u6846\u3002 \u6700\u7ec8\u70b9\u51fb Add SSH Key \u6309\u94ae \u5c31\u80fd\u6210\u529f\u6dfb\u52a0\u5566","title":"\u5c06\u516c\u94a5\u6dfb\u52a0\u5230github"},{"location":"github/03_SSH_for_github.html#_2","text":"\u63a5\u7740\u4f7f\u7528\u547d\u4ee4\uff1a ssh -T git@github.com \u68c0\u9a8c\u662f\u5426\u914d\u7f6e\u6210\u529f \u6ce8\u610f\uff1a\u7b2c\u4e00\u6b21\u8fde\u63a5\uff0c\u4f1a\u6709\u63d0\u793a\u662f\u5426\u4fe1\u4efbgithub\u670d\u52a1\u5668\uff0c\u6211\u4eec\u9700\u8981\u8f93\u5165yes","title":"\u6d4b\u8bd5\u4f7f\u7528"},{"location":"github/04_beauty_code.html","text":"\u7f8e\u5316\u4ee3\u7801\u5de5\u5177\u5206\u4eab \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u7f8e\u5316\u4ee3\u7801\u5de5\u5177\u5206\u4eab \u672c\u671f\u89c6\u9891\u548c\u5927\u5bb6\u5206\u4eab\u4e00\u4e0b\u600e\u4e48\u8ba9\u81ea\u5df1\u7684\u4ee3\u7801\u53d8\"\u6f02\u4eae\"\u3002 \u4ee3\u7801\u7f16\u7a0b\u89c4\u8303\uff1a\"\u534e\u4e3aC\u8bed\u8a00\u7f16\u7a0b\u89c4\u8303\" \u548c \"\u5fae\u8f6f\u4e00\u7ad9\u5f0f\u7f16\u7801\u6807\u51c6\" \u5f15\u5165 \u00b6 \u5728\u5b66\u4e60\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u65f6\uff0c\u6211\u53d1\u73b0\u7528\u547d\u4ee4 make of_format \u5c31\u53ef\u4ee5\u81ea\u52a8\u7f8e\u5316\u4ee3\u7801\u3002\u6240\u4ee5\u5c31\u8ffd\u6eaf\u4e86\u4ee5\u4e0a\u547d\u4ee4\u7684\u5b9e\u73b0\uff0c\u53d1\u73b0\u4e86black\u548cclang-format\u8fd9\u4e24\u4e2a\u547d\u4ee4 black\u548cclang-format\u5de5\u5177 \u00b6 \u662f\u4ec0\u4e48 black \u662fpython\u7684\u4e00\u4e2a\u7b2c\u4e09\u65b9\u5e93\uff0c\u53ef\u4ee5\u683c\u5f0f\u5316python\u4ee3\u7801 clang-format \u662f\u4e00\u4e2a\u800c\u7cbe\u81f4\u6587\u4ef6\uff0c\u53ef\u4ee5\u683c\u5f0f\u5316C++\u3001JAVA\u4ee3\u7801 \u600e\u4e48\u7528 black\u5de5\u5177 \u5b89\u88c5black\u5de5\u5177 pip insatll black \u4f7f\u7528\u65b9\u6cd5 python -m black \u8def\u5f84/\u6587\u4ef6\u540d clang-format \u5b89\u88c5 clang-format\u662fLLVM\u5de5\u5177\u96c6\u4e2d\u7684\u4e00\u6b3e\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b89\u88c5LLVM\u83b7\u53d6\u3002\u4e0b\u8f7d\u5730\u5740https://releases.llvm.org/ \u4f7f\u7528\u65b9\u6cd5 clang-format \u8def\u5f84/\u6587\u4ef6\u540d","title":"\u7f8e\u5316\u4ee3\u7801\u5de5\u5177\u5206\u4eab"},{"location":"github/04_beauty_code.html#_1","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u7f8e\u5316\u4ee3\u7801\u5de5\u5177\u5206\u4eab \u672c\u671f\u89c6\u9891\u548c\u5927\u5bb6\u5206\u4eab\u4e00\u4e0b\u600e\u4e48\u8ba9\u81ea\u5df1\u7684\u4ee3\u7801\u53d8\"\u6f02\u4eae\"\u3002 \u4ee3\u7801\u7f16\u7a0b\u89c4\u8303\uff1a\"\u534e\u4e3aC\u8bed\u8a00\u7f16\u7a0b\u89c4\u8303\" \u548c \"\u5fae\u8f6f\u4e00\u7ad9\u5f0f\u7f16\u7801\u6807\u51c6\"","title":"\u7f8e\u5316\u4ee3\u7801\u5de5\u5177\u5206\u4eab"},{"location":"github/04_beauty_code.html#_2","text":"\u5728\u5b66\u4e60\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u65f6\uff0c\u6211\u53d1\u73b0\u7528\u547d\u4ee4 make of_format \u5c31\u53ef\u4ee5\u81ea\u52a8\u7f8e\u5316\u4ee3\u7801\u3002\u6240\u4ee5\u5c31\u8ffd\u6eaf\u4e86\u4ee5\u4e0a\u547d\u4ee4\u7684\u5b9e\u73b0\uff0c\u53d1\u73b0\u4e86black\u548cclang-format\u8fd9\u4e24\u4e2a\u547d\u4ee4","title":"\u5f15\u5165"},{"location":"github/04_beauty_code.html#blackclang-format","text":"\u662f\u4ec0\u4e48 black \u662fpython\u7684\u4e00\u4e2a\u7b2c\u4e09\u65b9\u5e93\uff0c\u53ef\u4ee5\u683c\u5f0f\u5316python\u4ee3\u7801 clang-format \u662f\u4e00\u4e2a\u800c\u7cbe\u81f4\u6587\u4ef6\uff0c\u53ef\u4ee5\u683c\u5f0f\u5316C++\u3001JAVA\u4ee3\u7801 \u600e\u4e48\u7528 black\u5de5\u5177 \u5b89\u88c5black\u5de5\u5177 pip insatll black \u4f7f\u7528\u65b9\u6cd5 python -m black \u8def\u5f84/\u6587\u4ef6\u540d clang-format \u5b89\u88c5 clang-format\u662fLLVM\u5de5\u5177\u96c6\u4e2d\u7684\u4e00\u6b3e\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b89\u88c5LLVM\u83b7\u53d6\u3002\u4e0b\u8f7d\u5730\u5740https://releases.llvm.org/ \u4f7f\u7528\u65b9\u6cd5 clang-format \u8def\u5f84/\u6587\u4ef6\u540d","title":"black\u548cclang-format\u5de5\u5177"},{"location":"learn_cpp/01_rvalue_ref.html","text":"\u53f3\u503c\u5f15\u7528 \u00b6 \u53f3\u503c\u5f15\u7528\u8d77\u7801\u89e3\u51b3\u4e86\u4e24\u4e2a\u95ee\u9898\uff1a \u5b9e\u73b0 move \u8bed\u4e49\uff08\u672c\u6587\u4ecb\u7ecd\uff09 \u5b9e\u73b0\u5b8c\u7f8e\u8f6c\u53d1\uff08\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4ecb\u7ecd\uff09 \u672c\u6587\u4f1a\u4ecb\u7ecd\u4ec0\u4e48\u662f\uff1a \u4ec0\u4e48\u662f\u53f3\u503c \u4ec0\u4e48\u662f\u53f3\u503c\u5f15\u7528\u3001move \u8bed\u4e49 std::move \u539f\u7406\u5256\u6790 std::move \u4f7f\u7528\u6ce8\u610f\u4e8b\u9879 \u4ec0\u4e48\u662f\u53f3\u503c \u00b6 C++ \u4e2d\u8868\u8fbe\u5f0f\u6c1b\u56f4\u5de6\u503c\u548c\u53f3\u503c\uff0c\u7b80\u5355\u800c\u8a00\uff0c\u6709\u5185\u5b58\u5730\u5740\u7684\u8868\u8fbe\u5f0f\u5c31\u662f\u5de6\u503c\uff0c\u5b83\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u7684**\u5de6\u8fb9\u6216\u8005\u53f3\u8fb9**\u3002\u65e0\u6cd5\u53d6\u5185\u5b58\u5730\u5740\u7684\u8868\u8fbe\u5f0f\u662f\u53f3\u503c\uff0c**\u53ea\u80fd**\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u7684\u53f3\u8fb9\u3002 \u4ee5\u4e0b\u662f C++ \u4e2d\u5e38\u89c1\u7684\u51fa\u73b0\u53f3\u503c\u7684\u60c5\u51b5\uff1a \u5e38\u91cf\u5b57\u9762\u91cf \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u7684\u503c\u6216\u5bf9\u8c61\uff08\u5de6\u503c\u5f15\u7528\u7c7b\u578b\u9664\u5916\uff09 \u65e0\u540d\u5bf9\u8c61 int funA ( int a ){ return a ; } int & funB ( int a ){ return a ; } class A { public : A (){} ~ A (){} }; int main ( int argc , char * argv []){ auto pos_num = & ( 10 ); // \u4e0d\u80fd\u53d6\u5730\u5740 1. \u5e38\u91cf\u5b57\u9762\u91cf auto pos_funA = & ( funA ( 0x1111 )); // \u4e0d\u80fd\u53d6\u5730\u5740 2. \u51fd\u6570\u8c03\u7528\u7684\u8fd4\u56de\u503c auto pos_funB = & ( funB ( 0x2222 )); // \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u7684\u7c7b\u578b\u4e3a\u5de6\u503c\u5f15\u7528\uff0c\u5219\u8fd4\u56de\u7684\u7ed3\u679c\u4e3a\u5de6\u503c auto pos_class = & ( A ()); // \u4e0d\u80fd\u53d6\u5730\u5740 3. \u65e0\u540d\u5bf9\u8c61 return 0 ; } \u4ec0\u4e48\u662f\u53f3\u503c\u5f15\u7528 \u00b6 \u5728 C++11 \u4e4b\u524d\uff0c\u662f\u53ea\u6709\u5de6\u503c\u5f15\u7528\uff08C++11\u4e4b\u540e\uff0c\u4e3a\u4e86\u548c\u53f3\u503c\u5f15\u7528\u533a\u5206\uff0c\u539f\u6765\u7684\u201c\u5f15\u7528\u201d\u624d\u79f0\u4e3a\u201c\u5de6\u503c\u5f15\u7528\u201d\uff09\uff0c\u6ca1\u6709\u53f3\u503c\u5f15\u7528\u7684\u3002\u56e0\u6b64\u65e0\u6cd5\u7528\u975e const \uff08\u5de6\u503c\uff09\u5f15\u7528\u5339\u914d\u53f3\u503c\u7684\u3002 \u6bd4\u5982\uff1a int fun ( int & a ){ return a ; } \u4ee5\u4e0b\u8c03\u7528\u4f1a\u51fa\u9519\uff1a fun ( 10 ); // \u7f16\u8bd1\u62a5\u9519\uff1a\u65e0\u6cd5\u4ece int \u8f6c\u4e3a int& \u5982\u679c\u975e\u8981\u5339\u914d\uff0c\u5219\u9700\u8981\u4f7f\u7528 const \uff08\u5de6\u503c\uff09\u5f15\u7528\uff1a int fun ( const int & a ){ return a ; } int main ( int argc , char * argv []){ fun ( 10 ); // \u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7\u3002const (\u5de6\u503c)\u5f15\u7528\u53ef\u4ee5\u5339\u914d\u53f3\u503c return 0 ; } \u5728 C++11 \u4e4b\u540e\uff0c\u4e0d\u7528 const \u5de6\u503c\u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u5339\u914d\u53f3\u503c\u4e86\uff1a int fun ( int && a ){ return a ; } int main ( int argc , char * argv []){ fun ( 10 ); // \u53f3\u503c\u5f15\u7528\u53ef\u4ee5\u5339\u914d\u53f3\u503c return 0 ; } \u5f53\u7136\uff0c\u53f3\u503c\u5f15\u7528\u7684\u53d1\u660e\u4e0d\u662f\u4e3b\u8981\u4e3a\u4e86\u89e3\u51b3\u8fd9\u7c7b\u7b80\u5355\u7684\u8c03\u7528\u5339\u914d\u95ee\u9898\uff0c\u800c\u662f\u4e3a\u4e86\u5f15\u5165 move \u8bed\u4e49 \u3002 move \u8bed\u4e49 \u00b6 \u5148\u770b\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\u53d1\u660e\u524d\uff0c\u8d44\u6e90\u5229\u7528\u6548\u7387\u4e0d\u9ad8\u7684\u95ee\u9898\uff0c\u4ee5\u5b57\u7b26\u4e32\u7c7b\u4e3a\u4f8b\u3002\u6211\u4eec\u77e5\u9053\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u505a\u6d45\u62f7\u8d1d\uff0c\u662f\u9519\u8bef\u7684\uff1a class CMyString { public : char * m_pBuffer ; int m_iLen ; CMyString ( const char * pString ){ m_iLen = strlen ( pString ) + 1 ; m_pBuffer = new char [ m_iLen ]; strcpy ( m_pBuffer , pString ); } ~ CMyString (){ m_iLen = 0 ; if ( m_pBuffer ){ delete [] m_pBuffer ; } } CMyString ( CMyString & other ){ // \u6d45\u62f7\u8d1d\uff0c\u9519\u8bef this -> m_pBuffer = other . m_pBuffer ; this -> m_iLen = other . m_iLen ; } }; \u9519\u8bef\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u5982\u679c A \u5bf9\u8c61\u62f7\u8d1d\u590d\u5236\u81ea B \u5bf9\u8c61\uff0c\u90a3\u4e48\u5f53 B \u5bf9\u8c61\u6790\u6784\u65f6\uff0c\u4f1a\u9500\u6bc1 m_pBuffer \u6307\u5411\u7684\u7f13\u51b2\u533a\uff0c\u8fd9\u6837 A \u5bf9\u8c61\u6240\u6307\u5411\u7684\u7f13\u51b2\u533a\u4e5f\u88ab\u4e00\u8d77\u9500\u6bc1\u4e86\u3002 \u56e0\u6b64 CMyString \u5176\u5b9e\u9700\u8981\u7684\u662f\u6df1\u62f7\u8d1d\uff1a CMyString ( CMyString & other ){ // \u6df1\u62f7\u8d1d this -> m_iLen = other . m_iLen ; this -> m_pBuffer = new char [ m_iLen ]; strcpy ( this -> m_pBuffer , other . m_pBuffer ); } \u8fd9\u662f\u5b89\u5168\u3001\u6b63\u786e\u7684\u505a\u6cd5\u3002\u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u6df1\u62f7\u8d1d\u5176\u5b9e \u4e0d\u662f\u6700\u9ad8\u6548\u7684 \uff0c\u6bd4\u5982\u5bf9\u4e8e\u4ee5\u4e0b\u4ee3\u7801\uff1a int main ( int argc , char * argv []){ CMyString str1 ( CMyString ( \"hello\" )); return 0 ; } \u4ee5\u4e0a\u7684 CMyString(\"hello\") \u662f\u4e00\u4e2a\u53f3\u503c\uff08\u65e0\u540d\u5bf9\u8c61\uff09\uff0c\u8fd9\u4e2a\u65e0\u540d\u5bf9\u8c61\u5728\u5b8c\u6210 str1 \u7684\u6784\u9020\u540e\uff0c\u751f\u547d\u5468\u671f\u4e5f\u5c31\u7ed3\u675f\u4e86\uff0c\u65e0\u540d\u5bf9\u8c61\u7684\u8d44\u6e90\u4e5f\u5c31\u88ab\u91ca\u653e\u4e86\u3002 \u8fd9\u4e2a\u65f6\u5019\u95ee\u9898\u6765\u4e86\uff1a\u65e2\u7136\u660e\u77e5\u9053\u65e0\u540d\u5bf9\u8c61\u7684\u8d44\u6e90\u9a6c\u4e0a\u5c31\u4f1a\u91ca\u653e\uff0c\u90a3\u4f55\u5fc5\u4e0d\u505a\u6df1\u62f7\u8d1d\uff0c\u800c\u662f\u76f4\u63a5\u201c\u5077\u201d\u8fd9\u4e2a\u65e0\u540d\u5bf9\u8c61\u7684\u8d44\u6e90\u5462\uff1f\u4ee3\u7801\u903b\u8f91\u5982\u4e0b\uff1a CMyString ( /*\u7c7b\u578b\u6682\u4e14\u4fdd\u5bc6*/ other ){ this -> m_iLen = other . m_iLen ; this -> m_pBuffer = other . m_pBuffer ; // \u6d45\u62f7\u8d1d\u3001\u5077\u8d44\u6e90 other . m_pBuffer = nullptr ; // \u8ba9 other.m_pBuffer \u4e0d\u88ab\u91ca\u653e } \u6709\u4e86\u4ee5\u4e0a\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u4e86\uff0c\u5176\u5b9e\u6709\u4e24\u79cd\u201c\u4ece\u5bf9\u8c61B\u5f97\u5230\u5bf9\u8c61A\u201d\u7684\u6784\u9020\uff1a \u4e00\u79cd\u662f C++11 \u4e4b\u524d\u7684\u62f7\u8d1d\u6784\u9020 \u4e00\u79cd\u662f C++11 \u4e4b\u540e\u5f15\u5165\u7684\uff0c\u4e13\u95e8\u9488\u5bf9 B \u662f\u53f3\u503c\u3001\u53ef\u4ee5\u88ab\u201c\u5077\u8d44\u6e90\u201d\u573a\u666f\u7684\u6784\u9020\uff0c\u79f0\u4e3a \u79fb\u52a8\u6784\u9020 \u7528\u4ee5\u4e0a CMyString \u4e3a\u4f8b\uff0c\u63ed\u6653\u79fb\u52a8\u6784\u9020\u7684\u539f\u578b\uff0c\u5b83\u7684\u5f62\u53c2\u662f \u53f3\u503c\u5f15\u7528 \uff1a CMyString ( CMyString && other ){ this -> m_iLen = other . m_iLen ; this -> m_pBuffer = other . m_pBuffer ; // \u6d45\u62f7\u8d1d\u3001\u5077\u8d44\u6e90 other . m_pBuffer = nullptr ; // \u8ba9 m_pBuffer \u4e0d\u56e0\u4e3aother\u6790\u6784\u800c\u91ca\u653e } \u7c7b\u4f3c\u4e8e\u62f7\u8d1d\u6784\u9020\u6709\u4e0e\u4e4b\u5bf9\u5e94\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d operator=(CMyString&) \uff08\u62f7\u8d1d\u8d4b\u503c\uff09\uff0c\u79fb\u52a8\u6784\u9020\u4e5f\u6709\u4e0e\u4e4b\u5bf9\u5e94\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff1a operator=(CMyString&&) \uff08\u79fb\u52a8\u8d4b\u503c\uff09\u3002 \u79fb\u52a8\u6784\u9020\u548c\u79fb\u52a8\u8d4b\u503c\uff0c\u7edf\u79f0\u4e3a \u79fb\u52a8\u8bed\u4e49 \u3002 std::move \u00b6 C++11 \u4e2d\u5f15\u5165\u53f3\u503c\u5f15\u7528\u7684\u540c\u65f6\uff0c\u8fd8\u5728\u6807\u51c6\u4e2d\u5f15\u5165\u4e86 std::move \u51fd\u6570\u3002\u5b83\u7684\u4f5c\u7528\u662f\u201c\u5c06\u8868\u8fbe\u5f0f\u5f3a\u884c\u8f6c\u4e3a\u53f3\u503c\u7c7b\u578b\u201d\u3002 \u6211\u4eec\u5148\u770b\u4e0b\u4f8b\uff0c\u5b83\u662f\u4e00\u4e2a\u201c\u53ef\u4ee5\u6539\u8fdb\u201d\u7684 myswap \u51fd\u6570\uff1a template < typename T > void myswap ( T & a , T & b ){ T temp ( a ); // \u53d1\u751f\u62f7\u8d1d\u6784\u9020 a = b ; // \u53d1\u751f\u62f7\u8d1d\u8d4b\u503c b = temp ; // \u53d1\u751f\u62f7\u8d1d\u8d4b\u503c } \u4ee5\u4e0a\u4e09\u884c\u4ee3\u7801\uff0c\u56e0\u4e3a\u6ca1\u6709\u53f3\u503c\u7c7b\u578b\uff0c\u6240\u4ee5\u4e0d\u4f1a\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\u3002\u5982\u679c T \u662f CMyString \uff0c\u90a3\u4e48\u4f1a\u53d1\u751f\u4e09\u6b21\u6df1\u62f7\u8d1d\u3002 \u4f46\u662f\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\uff0c\u5b9e\u9645\u4e0a\u4ee5\u4e0a\u4e09\u884c\u4f7f\u7528\u79fb\u52a8\u8bed\u4e49\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a\u4f5c\u4e3a\u6784\u9020\u6216\u8005\u8d4b\u503c\u7684\u6e90\u53d8\u91cf\uff0c\u8981\u4e48\u4f7f\u7528\u8fc7\u4e00\u6b21\u540e\u5c31\u4e0d\u518d\u4f7f\u7528\uff0c\u8981\u4e48\u4ec5\u4f5c\u4e3a\u8d4b\u503c\u7684\u76ee\u6807\u3002\u6362\u8a00\u4e4b\uff0c\u5b83\u4eec\u7684\u8d44\u6e90\u662f\u53ef\u4ee5\u88ab\u201c\u5077\u201d\u7684\u3002 \u8fd9\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 std::move \u5f3a\u884c\u628a\u53d8\u91cf\u8f6c\u4e3a\u53f3\u503c\u7c7b\u578b\uff0c\u6765\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\u4e86\uff1a template < typename T > void myswap ( T & a , T & b ){ T temp ( std :: move ( a )); // \u53d1\u751f\u79fb\u52a8\u6784\u9020\uff0c\u5077 a \u7684\u8d44\u6e90 a = std :: move ( b ); // \u53d1\u751f\u79fb\u52a8\u6784\u9020\uff0c\u5077 b \u7684\u8d44\u6e90 b = std :: move ( temp ); // \u53d1\u751f\u79fb\u52a8\u8d4b\u503c\uff0c\u5077 temp \u7684\u8d44\u6e90 } std::move \u539f\u7406\u89e3\u6790 \u00b6 std::move \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u795e\u5947\u5730\u628a\u5de6\u503c\u7ed9\u5f3a\u5236\u8f6c\u53d8\u6210\u53f3\u503c\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u89e3\u6790\u5b83\u7684\u6e90\u7801\u77e5\u6653\u7b54\u6848\uff0c\u4ece C++ \u5934\u6587\u4ef6\u4e2d\u627e\u5230 move \u7684\u6e90\u7801\uff1a template < typename _Tp > constexpr typename std :: remove_reference < _Tp >:: type && move ( _Tp && __t ) noexcept { return static_cast < typename std :: remove_reference < _Tp >:: type &&> ( __t ); } \u79fb\u9664\u6389\u4e0d\u592a\u76f8\u5173\u7684 constexpr \u3001 noexcept \u5f97\u5230\uff1a template < typename _Tp > typename std :: remove_reference < _Tp >:: type && move ( _Tp && __t ) { return static_cast < typename std :: remove_reference < _Tp >:: type &&> ( __t ); } \u4f1a\u53d1\u73b0 move \u7684\u8fd4\u56de\u503c\u548c\u5185\u90e8\u5b9e\u73b0\uff0c\u90fd\u548c std::remove_reference<_Tp>::type \u5f88\u6709\u5173\u7cfb\uff0c\u90a3\u4e48\u7ee7\u7eed\u770b\u770b std::remove_reference \u7684\u5b9e\u73b0\uff1a template < typename _Tp > struct remove_reference { typedef _Tp type ; }; template < typename _Tp > struct remove_reference < _Tp &> { typedef _Tp type ; }; template < typename _Tp > struct remove_reference < _Tp &&> { typedef _Tp type ; }; \u53d1\u73b0 remove_reference \uff0c\u53d1\u73b0\u5b83\u7684\u4f5c\u7528\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e0d\u7ba1\u6a21\u677f\u53c2\u6570\u662f _Tp \uff0c\u8fd8\u662f _Tp \u7684\u5de6\u503c\u5f15\u7528\uff0c\u6216\u8005 _Tp \u7684\u53f3\u503c\u5f15\u7528\uff0c\u90fd\u7edf\u7edf\u90fd\u5b9a\u4e49\u4e00\u4e2a type \u7b49\u4ef7\u4e8e _Tp \u7c7b\u578b\u3002\u56de\u5934\u770b\uff0c\u5176\u5b9e remove_reference \u7684\u4f5c\u7528\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u201c\u79fb\u9664\u6389\u7c7b\u578b\u7684\u5f15\u7528\u6027\u8d28\u201d \u7684\u610f\u601d\u3002 \u77e5\u9053\u8fd9\u4e2a\u4ee5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u6b65\u4e00\u90e8\u7b80\u5316 move \u7684\u6e90\u7801\uff0c\u53ea\u8c08\u539f\u7406\u4e0d\u6c42\u4e25\u8c28\u7684\u8bdd\u5176\u5b9e\u5c31\u662f\uff1a template < typename _Tp > _Tp && move ( _Tp && __t ){ return ( _Tp && )( __t ); // \u5f3a\u5236\u7c7b\u578b\u8f6c\u6362 } move \u4ec5\u4ec5\u662f\u505a\u4e86\u4e00\u4e2a\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u800c\u5df2\uff08\u5176\u5b9e\u8fd8\u6d89\u53ca\u5230\u4e86\u201c\u4e07\u80fd\u5f15\u7528\u201d\u7684\u77e5\u8bc6\u70b9\uff0c\u6211\u4eec\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4ecb\u7ecd\uff09\u3002 std::move \u7684\u4f7f\u7528\u6ce8\u610f\u4e8b\u9879 \u00b6 \u7ec4\u5408\u6216\u8005\u7ee7\u627f\u65f6\uff0c\u663e\u5f0f\u8c03\u7528 std::move \u00b6 \u4e00\u822c\u800c\u8a00\uff0c\u6d3e\u751f\u7c7b\u5982\u679c\u662f\u79fb\u52a8\uff0c\u90a3\u4e48\u4e5f \u671f\u5f85 \u57fa\u7c7b\u4e5f\u662f\u79fb\u52a8\u6784\u9020\uff08\u6d3e\u751f\u7c7b\u3001\u57fa\u7c7b\u7684\u8d44\u6e90\u4e00\u8d77\u201c\u5077\u201d\uff09\u3002 \u4f46\u662f\uff0c\u4ee5\u4e0b\u7684\u5199\u6cd5\u662f\u4e0d\u6b63\u786e\u7684\uff1a class CDerived : public CBase { public : CDerived ( CDerived && other ) : CBase ( other ) // \u65e0\u6cd5\u89e6\u53d1 CBase \u7684\u79fb\u52a8\u6784\u9020 { // ... } }; \u5b9e\u9645\u4e0a\uff0c\u4ee5\u4e0a\u4ee3\u7801 \u4e0d\u4f1a \u89e6\u53d1 CBase \u7684\u79fb\u52a8\u6784\u9020\uff0c\u800c\u662f\u89e6\u53d1\u7684\u62f7\u8d1d\u6784\u9020\u3002\u56e0\u4e3a\uff1a Note \u6709\u540d\u5b57 \u7684\u53f3\u503c\u5f15\u7528\u5176\u5b9e\u662f \u5de6\u503c \u6709\u540d\u5b57 \u7684\u53f3\u503c\u5f15\u7528\u5176\u5b9e\u662f \u5de6\u503c \u6709\u540d\u5b57 \u7684\u53f3\u503c\u5f15\u7528\u5176\u5b9e\u662f \u5de6\u503c \u6240\u4ee5\uff0c\u5f53\u6211\u4eec\u671f\u5f85\u201c\u57fa\u7c7b\u4e5f\u662f\u505a\u79fb\u52a8\u6784\u9020\u65f6\u201d\uff0c\u5e94\u8be5\u663e\u5f0f\u8c03\u7528 std::move \uff1a class CDerived : public CBase { public : CDerived ( CDerived && other ) : CBase ( std :: move ( other )) // \u5f3a\u5236\u8f6c\u4e3a\u53f3\u503c\uff0c\u89e6\u53d1 CBase \u7684\u79fb\u52a8\u6784\u9020 { // ... } }; \u8fd9\u6837\u7684\u4f8b\u5b50\u4e5f\u9002\u7528\u4e8e\u7ec4\u5408\uff08\u6210\u5458\u521d\u59cb\u5316\uff09\u7684\u60c5\u51b5\uff0c\u5728 OneFlow \u4ed3\u5e93\u4e2d\u53ef\u4ee5\u627e\u5230\u4e0d\u5c11\uff1a HightOrderBool , OpExpression \u3002 \u5c40\u90e8\u53d8\u91cf\u8fd4\u56de\u65f6\uff0c\u4e0d\u8c03\u7528 std::move \u00b6 \u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u8fd4\u56de\u5c40\u90e8\u53d8\u91cf\uff0c\u6bd4\u5982\u4e0b\u4f8b\uff1a CTemp foo (){ CTemp x ; return x ; // x \u7684\u4f5c\u7528\u57df\u548c\u751f\u547d\u5468\u671f\u5373\u5c06\u7ed3\u675f } \u8fd9\u65f6\u4f60\u53ef\u80fd\u4f1a\u60f3\u5230\u201c\u7b49\u7b49\uff0c\u5728 foo() \u8c03\u7528\u5e76\u8fd4\u56de\u7684\u5730\u65b9\uff0c\u4f1a\u590d\u5236\u4e00\u6b21\u8fd4\u56de\u503c\uff0c\u800c x \u6700\u597d\u8f6c\u6210\u53f3\u503c\uff0c\u4f7f\u7528\u79fb\u52a8\u6784\u9020\u6765\u590d\u5236\uff1a CTemp foo (){ CTemp x ; return std :: move ( x ); // \u5f88\u53ef\u80fd\u597d\u5fc3\u529e\u574f\u4e8b } \u5176\u5b9e\u8fd9\u6837\u4fee\u6539\u540e\uff0c\u53cd\u800c\u53ef\u80fd\u4f1a\u628a\u4e8b\u60c5\u53d8\u7cdf\u7cd5\uff0c\u6211\u4eec\u7528\u4ee5\u4e0b\u8bd5\u9a8c\u770b\u770b\u6548\u679c\uff1a #include <iostream> #include <utility> class CTemp { public : CTemp () { std :: cout << \"CTemp\uff1a\u6784\u9020\" << std :: endl ; } CTemp ( CTemp & other ) { std :: cout << \"CTemp\uff1a\u62f7\u8d1d\u6784\u9020\" << std :: endl ; } CTemp ( CTemp && other ) { std :: cout << \"CTemp\uff1a\u79fb\u52a8\u6784\u9020\" << std :: endl ; } }; //2.\u6ce8\u610f\u5b9e\u73b0\uff1a\u8fd4\u56de\u65f6\u4f18\u5316 CTemp foo (){ CTemp x ; return x ; //\u4f5c\u7528\u57df\u5728\u8be5\u51fd\u6570\u4e2d\u5c31\u7ed3\u675f\u4e86 } CTemp foo_move (){ CTemp x ; return std :: move ( x ); //\u4f5c\u7528\u57df\u5728\u8be5\u51fd\u6570\u4e2d\u5c31\u7ed3\u675f\u4e86 } int main ( int argc , char * argv []) { auto a = foo (); std :: cout << \"-----------\" << std :: endl ; auto b = foo_move (); return 0 ; } \u8f93\u51fa\u7ed3\u679c\u662f\uff1a CTemp\uff1a\u6784\u9020 ----------- CTemp\uff1a\u6784\u9020 CTemp\uff1a\u79fb\u52a8\u6784\u9020 \u4f1a\u53d1\u73b0\u53cd\u800c\u662f\u505a\u4e86 std::move \u7684 foo_move \u591a\u4e86\u4e00\u6b21\u6784\u9020\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u5176\u5b9e\u662f\u56e0\u4e3a\uff0c\u73b0\u4ee3\u7f16\u8bd1\u5668\u4e00\u822c\u90fd\u505a \u8fd4\u56de\u503c\u4f18\u5316 \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0e\u5176\u73b0\u5728 foo \u5185\u90e8\u6784\u9020\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf x \uff0c\u518d\u628a\u5b83\u590d\u5236\u51fa\u53bb\uff1b\u4e0d\u5982\u76f4\u63a5\u5728 foo \u51fd\u6570\u8c03\u7528\u7684\u5730\u65b9\u76f4\u63a5\u6784\u9020\u4e00\u4e2a x \u5bf9\u8c61\u3002\u8fd9\u6837\u505a\u7684\u6548\u7387\u663e\u7136\u6bd4\u79fb\u52a8\u8bed\u4e49\u8981\u9ad8\u3002 \u5728\u8fd9\u7c7b\u60c5\u51b5\u4e0b\uff0c\u4e0d\u7528 std::move \u4e3a\u4f73\u3002 \u5f53\u7136\uff0c\u8fd9\u4e5f\u4e0d\u662f\u4e00\u6982\u800c\u8bba\u7684\uff0c\u6bd4\u5982\u8fd8\u6709\u4e0d\u5c11\u5176\u5b83\u60c5\u51b5\u5728\u8fd4\u56de\u65f6\u662f\u4f7f\u7528 std::move \u7684\uff0c\u6bd4\u5982 OneFlow \u4e2d\u5c31\u53ef\u4ee5\u627e\u5230\u4f8b\u5b50\u3002 \u603b\u4e4b\uff0c\u9700\u8981\u975e\u5e38\u6df1\u523b\u7684\u7406\u89e3 std::move \u7684\u201c\u526f\u4f5c\u7528\u201d\uff0c\u624d\u80fd\u505a\u597d\u76f8\u5173\u4f18\u5316\uff0c\u63a8\u8350\u5927\u5bb6\u53ef\u4ee5\u770b\u770b copy elision \u3002","title":"\u53f3\u503c\u5f15\u7528"},{"location":"learn_cpp/01_rvalue_ref.html#_1","text":"\u53f3\u503c\u5f15\u7528\u8d77\u7801\u89e3\u51b3\u4e86\u4e24\u4e2a\u95ee\u9898\uff1a \u5b9e\u73b0 move \u8bed\u4e49\uff08\u672c\u6587\u4ecb\u7ecd\uff09 \u5b9e\u73b0\u5b8c\u7f8e\u8f6c\u53d1\uff08\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4ecb\u7ecd\uff09 \u672c\u6587\u4f1a\u4ecb\u7ecd\u4ec0\u4e48\u662f\uff1a \u4ec0\u4e48\u662f\u53f3\u503c \u4ec0\u4e48\u662f\u53f3\u503c\u5f15\u7528\u3001move \u8bed\u4e49 std::move \u539f\u7406\u5256\u6790 std::move \u4f7f\u7528\u6ce8\u610f\u4e8b\u9879","title":"\u53f3\u503c\u5f15\u7528"},{"location":"learn_cpp/01_rvalue_ref.html#_2","text":"C++ \u4e2d\u8868\u8fbe\u5f0f\u6c1b\u56f4\u5de6\u503c\u548c\u53f3\u503c\uff0c\u7b80\u5355\u800c\u8a00\uff0c\u6709\u5185\u5b58\u5730\u5740\u7684\u8868\u8fbe\u5f0f\u5c31\u662f\u5de6\u503c\uff0c\u5b83\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u7684**\u5de6\u8fb9\u6216\u8005\u53f3\u8fb9**\u3002\u65e0\u6cd5\u53d6\u5185\u5b58\u5730\u5740\u7684\u8868\u8fbe\u5f0f\u662f\u53f3\u503c\uff0c**\u53ea\u80fd**\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u7684\u53f3\u8fb9\u3002 \u4ee5\u4e0b\u662f C++ \u4e2d\u5e38\u89c1\u7684\u51fa\u73b0\u53f3\u503c\u7684\u60c5\u51b5\uff1a \u5e38\u91cf\u5b57\u9762\u91cf \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u7684\u503c\u6216\u5bf9\u8c61\uff08\u5de6\u503c\u5f15\u7528\u7c7b\u578b\u9664\u5916\uff09 \u65e0\u540d\u5bf9\u8c61 int funA ( int a ){ return a ; } int & funB ( int a ){ return a ; } class A { public : A (){} ~ A (){} }; int main ( int argc , char * argv []){ auto pos_num = & ( 10 ); // \u4e0d\u80fd\u53d6\u5730\u5740 1. \u5e38\u91cf\u5b57\u9762\u91cf auto pos_funA = & ( funA ( 0x1111 )); // \u4e0d\u80fd\u53d6\u5730\u5740 2. \u51fd\u6570\u8c03\u7528\u7684\u8fd4\u56de\u503c auto pos_funB = & ( funB ( 0x2222 )); // \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u7684\u7c7b\u578b\u4e3a\u5de6\u503c\u5f15\u7528\uff0c\u5219\u8fd4\u56de\u7684\u7ed3\u679c\u4e3a\u5de6\u503c auto pos_class = & ( A ()); // \u4e0d\u80fd\u53d6\u5730\u5740 3. \u65e0\u540d\u5bf9\u8c61 return 0 ; }","title":"\u4ec0\u4e48\u662f\u53f3\u503c"},{"location":"learn_cpp/01_rvalue_ref.html#_3","text":"\u5728 C++11 \u4e4b\u524d\uff0c\u662f\u53ea\u6709\u5de6\u503c\u5f15\u7528\uff08C++11\u4e4b\u540e\uff0c\u4e3a\u4e86\u548c\u53f3\u503c\u5f15\u7528\u533a\u5206\uff0c\u539f\u6765\u7684\u201c\u5f15\u7528\u201d\u624d\u79f0\u4e3a\u201c\u5de6\u503c\u5f15\u7528\u201d\uff09\uff0c\u6ca1\u6709\u53f3\u503c\u5f15\u7528\u7684\u3002\u56e0\u6b64\u65e0\u6cd5\u7528\u975e const \uff08\u5de6\u503c\uff09\u5f15\u7528\u5339\u914d\u53f3\u503c\u7684\u3002 \u6bd4\u5982\uff1a int fun ( int & a ){ return a ; } \u4ee5\u4e0b\u8c03\u7528\u4f1a\u51fa\u9519\uff1a fun ( 10 ); // \u7f16\u8bd1\u62a5\u9519\uff1a\u65e0\u6cd5\u4ece int \u8f6c\u4e3a int& \u5982\u679c\u975e\u8981\u5339\u914d\uff0c\u5219\u9700\u8981\u4f7f\u7528 const \uff08\u5de6\u503c\uff09\u5f15\u7528\uff1a int fun ( const int & a ){ return a ; } int main ( int argc , char * argv []){ fun ( 10 ); // \u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7\u3002const (\u5de6\u503c)\u5f15\u7528\u53ef\u4ee5\u5339\u914d\u53f3\u503c return 0 ; } \u5728 C++11 \u4e4b\u540e\uff0c\u4e0d\u7528 const \u5de6\u503c\u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u5339\u914d\u53f3\u503c\u4e86\uff1a int fun ( int && a ){ return a ; } int main ( int argc , char * argv []){ fun ( 10 ); // \u53f3\u503c\u5f15\u7528\u53ef\u4ee5\u5339\u914d\u53f3\u503c return 0 ; } \u5f53\u7136\uff0c\u53f3\u503c\u5f15\u7528\u7684\u53d1\u660e\u4e0d\u662f\u4e3b\u8981\u4e3a\u4e86\u89e3\u51b3\u8fd9\u7c7b\u7b80\u5355\u7684\u8c03\u7528\u5339\u914d\u95ee\u9898\uff0c\u800c\u662f\u4e3a\u4e86\u5f15\u5165 move \u8bed\u4e49 \u3002","title":"\u4ec0\u4e48\u662f\u53f3\u503c\u5f15\u7528"},{"location":"learn_cpp/01_rvalue_ref.html#move","text":"\u5148\u770b\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\u53d1\u660e\u524d\uff0c\u8d44\u6e90\u5229\u7528\u6548\u7387\u4e0d\u9ad8\u7684\u95ee\u9898\uff0c\u4ee5\u5b57\u7b26\u4e32\u7c7b\u4e3a\u4f8b\u3002\u6211\u4eec\u77e5\u9053\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u505a\u6d45\u62f7\u8d1d\uff0c\u662f\u9519\u8bef\u7684\uff1a class CMyString { public : char * m_pBuffer ; int m_iLen ; CMyString ( const char * pString ){ m_iLen = strlen ( pString ) + 1 ; m_pBuffer = new char [ m_iLen ]; strcpy ( m_pBuffer , pString ); } ~ CMyString (){ m_iLen = 0 ; if ( m_pBuffer ){ delete [] m_pBuffer ; } } CMyString ( CMyString & other ){ // \u6d45\u62f7\u8d1d\uff0c\u9519\u8bef this -> m_pBuffer = other . m_pBuffer ; this -> m_iLen = other . m_iLen ; } }; \u9519\u8bef\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u5982\u679c A \u5bf9\u8c61\u62f7\u8d1d\u590d\u5236\u81ea B \u5bf9\u8c61\uff0c\u90a3\u4e48\u5f53 B \u5bf9\u8c61\u6790\u6784\u65f6\uff0c\u4f1a\u9500\u6bc1 m_pBuffer \u6307\u5411\u7684\u7f13\u51b2\u533a\uff0c\u8fd9\u6837 A \u5bf9\u8c61\u6240\u6307\u5411\u7684\u7f13\u51b2\u533a\u4e5f\u88ab\u4e00\u8d77\u9500\u6bc1\u4e86\u3002 \u56e0\u6b64 CMyString \u5176\u5b9e\u9700\u8981\u7684\u662f\u6df1\u62f7\u8d1d\uff1a CMyString ( CMyString & other ){ // \u6df1\u62f7\u8d1d this -> m_iLen = other . m_iLen ; this -> m_pBuffer = new char [ m_iLen ]; strcpy ( this -> m_pBuffer , other . m_pBuffer ); } \u8fd9\u662f\u5b89\u5168\u3001\u6b63\u786e\u7684\u505a\u6cd5\u3002\u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u6df1\u62f7\u8d1d\u5176\u5b9e \u4e0d\u662f\u6700\u9ad8\u6548\u7684 \uff0c\u6bd4\u5982\u5bf9\u4e8e\u4ee5\u4e0b\u4ee3\u7801\uff1a int main ( int argc , char * argv []){ CMyString str1 ( CMyString ( \"hello\" )); return 0 ; } \u4ee5\u4e0a\u7684 CMyString(\"hello\") \u662f\u4e00\u4e2a\u53f3\u503c\uff08\u65e0\u540d\u5bf9\u8c61\uff09\uff0c\u8fd9\u4e2a\u65e0\u540d\u5bf9\u8c61\u5728\u5b8c\u6210 str1 \u7684\u6784\u9020\u540e\uff0c\u751f\u547d\u5468\u671f\u4e5f\u5c31\u7ed3\u675f\u4e86\uff0c\u65e0\u540d\u5bf9\u8c61\u7684\u8d44\u6e90\u4e5f\u5c31\u88ab\u91ca\u653e\u4e86\u3002 \u8fd9\u4e2a\u65f6\u5019\u95ee\u9898\u6765\u4e86\uff1a\u65e2\u7136\u660e\u77e5\u9053\u65e0\u540d\u5bf9\u8c61\u7684\u8d44\u6e90\u9a6c\u4e0a\u5c31\u4f1a\u91ca\u653e\uff0c\u90a3\u4f55\u5fc5\u4e0d\u505a\u6df1\u62f7\u8d1d\uff0c\u800c\u662f\u76f4\u63a5\u201c\u5077\u201d\u8fd9\u4e2a\u65e0\u540d\u5bf9\u8c61\u7684\u8d44\u6e90\u5462\uff1f\u4ee3\u7801\u903b\u8f91\u5982\u4e0b\uff1a CMyString ( /*\u7c7b\u578b\u6682\u4e14\u4fdd\u5bc6*/ other ){ this -> m_iLen = other . m_iLen ; this -> m_pBuffer = other . m_pBuffer ; // \u6d45\u62f7\u8d1d\u3001\u5077\u8d44\u6e90 other . m_pBuffer = nullptr ; // \u8ba9 other.m_pBuffer \u4e0d\u88ab\u91ca\u653e } \u6709\u4e86\u4ee5\u4e0a\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u4e86\uff0c\u5176\u5b9e\u6709\u4e24\u79cd\u201c\u4ece\u5bf9\u8c61B\u5f97\u5230\u5bf9\u8c61A\u201d\u7684\u6784\u9020\uff1a \u4e00\u79cd\u662f C++11 \u4e4b\u524d\u7684\u62f7\u8d1d\u6784\u9020 \u4e00\u79cd\u662f C++11 \u4e4b\u540e\u5f15\u5165\u7684\uff0c\u4e13\u95e8\u9488\u5bf9 B \u662f\u53f3\u503c\u3001\u53ef\u4ee5\u88ab\u201c\u5077\u8d44\u6e90\u201d\u573a\u666f\u7684\u6784\u9020\uff0c\u79f0\u4e3a \u79fb\u52a8\u6784\u9020 \u7528\u4ee5\u4e0a CMyString \u4e3a\u4f8b\uff0c\u63ed\u6653\u79fb\u52a8\u6784\u9020\u7684\u539f\u578b\uff0c\u5b83\u7684\u5f62\u53c2\u662f \u53f3\u503c\u5f15\u7528 \uff1a CMyString ( CMyString && other ){ this -> m_iLen = other . m_iLen ; this -> m_pBuffer = other . m_pBuffer ; // \u6d45\u62f7\u8d1d\u3001\u5077\u8d44\u6e90 other . m_pBuffer = nullptr ; // \u8ba9 m_pBuffer \u4e0d\u56e0\u4e3aother\u6790\u6784\u800c\u91ca\u653e } \u7c7b\u4f3c\u4e8e\u62f7\u8d1d\u6784\u9020\u6709\u4e0e\u4e4b\u5bf9\u5e94\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d operator=(CMyString&) \uff08\u62f7\u8d1d\u8d4b\u503c\uff09\uff0c\u79fb\u52a8\u6784\u9020\u4e5f\u6709\u4e0e\u4e4b\u5bf9\u5e94\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff1a operator=(CMyString&&) \uff08\u79fb\u52a8\u8d4b\u503c\uff09\u3002 \u79fb\u52a8\u6784\u9020\u548c\u79fb\u52a8\u8d4b\u503c\uff0c\u7edf\u79f0\u4e3a \u79fb\u52a8\u8bed\u4e49 \u3002","title":"move \u8bed\u4e49"},{"location":"learn_cpp/01_rvalue_ref.html#stdmove","text":"C++11 \u4e2d\u5f15\u5165\u53f3\u503c\u5f15\u7528\u7684\u540c\u65f6\uff0c\u8fd8\u5728\u6807\u51c6\u4e2d\u5f15\u5165\u4e86 std::move \u51fd\u6570\u3002\u5b83\u7684\u4f5c\u7528\u662f\u201c\u5c06\u8868\u8fbe\u5f0f\u5f3a\u884c\u8f6c\u4e3a\u53f3\u503c\u7c7b\u578b\u201d\u3002 \u6211\u4eec\u5148\u770b\u4e0b\u4f8b\uff0c\u5b83\u662f\u4e00\u4e2a\u201c\u53ef\u4ee5\u6539\u8fdb\u201d\u7684 myswap \u51fd\u6570\uff1a template < typename T > void myswap ( T & a , T & b ){ T temp ( a ); // \u53d1\u751f\u62f7\u8d1d\u6784\u9020 a = b ; // \u53d1\u751f\u62f7\u8d1d\u8d4b\u503c b = temp ; // \u53d1\u751f\u62f7\u8d1d\u8d4b\u503c } \u4ee5\u4e0a\u4e09\u884c\u4ee3\u7801\uff0c\u56e0\u4e3a\u6ca1\u6709\u53f3\u503c\u7c7b\u578b\uff0c\u6240\u4ee5\u4e0d\u4f1a\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\u3002\u5982\u679c T \u662f CMyString \uff0c\u90a3\u4e48\u4f1a\u53d1\u751f\u4e09\u6b21\u6df1\u62f7\u8d1d\u3002 \u4f46\u662f\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\uff0c\u5b9e\u9645\u4e0a\u4ee5\u4e0a\u4e09\u884c\u4f7f\u7528\u79fb\u52a8\u8bed\u4e49\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a\u4f5c\u4e3a\u6784\u9020\u6216\u8005\u8d4b\u503c\u7684\u6e90\u53d8\u91cf\uff0c\u8981\u4e48\u4f7f\u7528\u8fc7\u4e00\u6b21\u540e\u5c31\u4e0d\u518d\u4f7f\u7528\uff0c\u8981\u4e48\u4ec5\u4f5c\u4e3a\u8d4b\u503c\u7684\u76ee\u6807\u3002\u6362\u8a00\u4e4b\uff0c\u5b83\u4eec\u7684\u8d44\u6e90\u662f\u53ef\u4ee5\u88ab\u201c\u5077\u201d\u7684\u3002 \u8fd9\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 std::move \u5f3a\u884c\u628a\u53d8\u91cf\u8f6c\u4e3a\u53f3\u503c\u7c7b\u578b\uff0c\u6765\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\u4e86\uff1a template < typename T > void myswap ( T & a , T & b ){ T temp ( std :: move ( a )); // \u53d1\u751f\u79fb\u52a8\u6784\u9020\uff0c\u5077 a \u7684\u8d44\u6e90 a = std :: move ( b ); // \u53d1\u751f\u79fb\u52a8\u6784\u9020\uff0c\u5077 b \u7684\u8d44\u6e90 b = std :: move ( temp ); // \u53d1\u751f\u79fb\u52a8\u8d4b\u503c\uff0c\u5077 temp \u7684\u8d44\u6e90 }","title":"std::move"},{"location":"learn_cpp/01_rvalue_ref.html#stdmove_1","text":"std::move \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u795e\u5947\u5730\u628a\u5de6\u503c\u7ed9\u5f3a\u5236\u8f6c\u53d8\u6210\u53f3\u503c\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u89e3\u6790\u5b83\u7684\u6e90\u7801\u77e5\u6653\u7b54\u6848\uff0c\u4ece C++ \u5934\u6587\u4ef6\u4e2d\u627e\u5230 move \u7684\u6e90\u7801\uff1a template < typename _Tp > constexpr typename std :: remove_reference < _Tp >:: type && move ( _Tp && __t ) noexcept { return static_cast < typename std :: remove_reference < _Tp >:: type &&> ( __t ); } \u79fb\u9664\u6389\u4e0d\u592a\u76f8\u5173\u7684 constexpr \u3001 noexcept \u5f97\u5230\uff1a template < typename _Tp > typename std :: remove_reference < _Tp >:: type && move ( _Tp && __t ) { return static_cast < typename std :: remove_reference < _Tp >:: type &&> ( __t ); } \u4f1a\u53d1\u73b0 move \u7684\u8fd4\u56de\u503c\u548c\u5185\u90e8\u5b9e\u73b0\uff0c\u90fd\u548c std::remove_reference<_Tp>::type \u5f88\u6709\u5173\u7cfb\uff0c\u90a3\u4e48\u7ee7\u7eed\u770b\u770b std::remove_reference \u7684\u5b9e\u73b0\uff1a template < typename _Tp > struct remove_reference { typedef _Tp type ; }; template < typename _Tp > struct remove_reference < _Tp &> { typedef _Tp type ; }; template < typename _Tp > struct remove_reference < _Tp &&> { typedef _Tp type ; }; \u53d1\u73b0 remove_reference \uff0c\u53d1\u73b0\u5b83\u7684\u4f5c\u7528\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e0d\u7ba1\u6a21\u677f\u53c2\u6570\u662f _Tp \uff0c\u8fd8\u662f _Tp \u7684\u5de6\u503c\u5f15\u7528\uff0c\u6216\u8005 _Tp \u7684\u53f3\u503c\u5f15\u7528\uff0c\u90fd\u7edf\u7edf\u90fd\u5b9a\u4e49\u4e00\u4e2a type \u7b49\u4ef7\u4e8e _Tp \u7c7b\u578b\u3002\u56de\u5934\u770b\uff0c\u5176\u5b9e remove_reference \u7684\u4f5c\u7528\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u201c\u79fb\u9664\u6389\u7c7b\u578b\u7684\u5f15\u7528\u6027\u8d28\u201d \u7684\u610f\u601d\u3002 \u77e5\u9053\u8fd9\u4e2a\u4ee5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u6b65\u4e00\u90e8\u7b80\u5316 move \u7684\u6e90\u7801\uff0c\u53ea\u8c08\u539f\u7406\u4e0d\u6c42\u4e25\u8c28\u7684\u8bdd\u5176\u5b9e\u5c31\u662f\uff1a template < typename _Tp > _Tp && move ( _Tp && __t ){ return ( _Tp && )( __t ); // \u5f3a\u5236\u7c7b\u578b\u8f6c\u6362 } move \u4ec5\u4ec5\u662f\u505a\u4e86\u4e00\u4e2a\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u800c\u5df2\uff08\u5176\u5b9e\u8fd8\u6d89\u53ca\u5230\u4e86\u201c\u4e07\u80fd\u5f15\u7528\u201d\u7684\u77e5\u8bc6\u70b9\uff0c\u6211\u4eec\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4ecb\u7ecd\uff09\u3002","title":"std::move \u539f\u7406\u89e3\u6790"},{"location":"learn_cpp/01_rvalue_ref.html#stdmove_2","text":"","title":"std::move \u7684\u4f7f\u7528\u6ce8\u610f\u4e8b\u9879"},{"location":"learn_cpp/01_rvalue_ref.html#stdmove_3","text":"\u4e00\u822c\u800c\u8a00\uff0c\u6d3e\u751f\u7c7b\u5982\u679c\u662f\u79fb\u52a8\uff0c\u90a3\u4e48\u4e5f \u671f\u5f85 \u57fa\u7c7b\u4e5f\u662f\u79fb\u52a8\u6784\u9020\uff08\u6d3e\u751f\u7c7b\u3001\u57fa\u7c7b\u7684\u8d44\u6e90\u4e00\u8d77\u201c\u5077\u201d\uff09\u3002 \u4f46\u662f\uff0c\u4ee5\u4e0b\u7684\u5199\u6cd5\u662f\u4e0d\u6b63\u786e\u7684\uff1a class CDerived : public CBase { public : CDerived ( CDerived && other ) : CBase ( other ) // \u65e0\u6cd5\u89e6\u53d1 CBase \u7684\u79fb\u52a8\u6784\u9020 { // ... } }; \u5b9e\u9645\u4e0a\uff0c\u4ee5\u4e0a\u4ee3\u7801 \u4e0d\u4f1a \u89e6\u53d1 CBase \u7684\u79fb\u52a8\u6784\u9020\uff0c\u800c\u662f\u89e6\u53d1\u7684\u62f7\u8d1d\u6784\u9020\u3002\u56e0\u4e3a\uff1a Note \u6709\u540d\u5b57 \u7684\u53f3\u503c\u5f15\u7528\u5176\u5b9e\u662f \u5de6\u503c \u6709\u540d\u5b57 \u7684\u53f3\u503c\u5f15\u7528\u5176\u5b9e\u662f \u5de6\u503c \u6709\u540d\u5b57 \u7684\u53f3\u503c\u5f15\u7528\u5176\u5b9e\u662f \u5de6\u503c \u6240\u4ee5\uff0c\u5f53\u6211\u4eec\u671f\u5f85\u201c\u57fa\u7c7b\u4e5f\u662f\u505a\u79fb\u52a8\u6784\u9020\u65f6\u201d\uff0c\u5e94\u8be5\u663e\u5f0f\u8c03\u7528 std::move \uff1a class CDerived : public CBase { public : CDerived ( CDerived && other ) : CBase ( std :: move ( other )) // \u5f3a\u5236\u8f6c\u4e3a\u53f3\u503c\uff0c\u89e6\u53d1 CBase \u7684\u79fb\u52a8\u6784\u9020 { // ... } }; \u8fd9\u6837\u7684\u4f8b\u5b50\u4e5f\u9002\u7528\u4e8e\u7ec4\u5408\uff08\u6210\u5458\u521d\u59cb\u5316\uff09\u7684\u60c5\u51b5\uff0c\u5728 OneFlow \u4ed3\u5e93\u4e2d\u53ef\u4ee5\u627e\u5230\u4e0d\u5c11\uff1a HightOrderBool , OpExpression \u3002","title":"\u7ec4\u5408\u6216\u8005\u7ee7\u627f\u65f6\uff0c\u663e\u5f0f\u8c03\u7528 std::move"},{"location":"learn_cpp/01_rvalue_ref.html#stdmove_4","text":"\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u8fd4\u56de\u5c40\u90e8\u53d8\u91cf\uff0c\u6bd4\u5982\u4e0b\u4f8b\uff1a CTemp foo (){ CTemp x ; return x ; // x \u7684\u4f5c\u7528\u57df\u548c\u751f\u547d\u5468\u671f\u5373\u5c06\u7ed3\u675f } \u8fd9\u65f6\u4f60\u53ef\u80fd\u4f1a\u60f3\u5230\u201c\u7b49\u7b49\uff0c\u5728 foo() \u8c03\u7528\u5e76\u8fd4\u56de\u7684\u5730\u65b9\uff0c\u4f1a\u590d\u5236\u4e00\u6b21\u8fd4\u56de\u503c\uff0c\u800c x \u6700\u597d\u8f6c\u6210\u53f3\u503c\uff0c\u4f7f\u7528\u79fb\u52a8\u6784\u9020\u6765\u590d\u5236\uff1a CTemp foo (){ CTemp x ; return std :: move ( x ); // \u5f88\u53ef\u80fd\u597d\u5fc3\u529e\u574f\u4e8b } \u5176\u5b9e\u8fd9\u6837\u4fee\u6539\u540e\uff0c\u53cd\u800c\u53ef\u80fd\u4f1a\u628a\u4e8b\u60c5\u53d8\u7cdf\u7cd5\uff0c\u6211\u4eec\u7528\u4ee5\u4e0b\u8bd5\u9a8c\u770b\u770b\u6548\u679c\uff1a #include <iostream> #include <utility> class CTemp { public : CTemp () { std :: cout << \"CTemp\uff1a\u6784\u9020\" << std :: endl ; } CTemp ( CTemp & other ) { std :: cout << \"CTemp\uff1a\u62f7\u8d1d\u6784\u9020\" << std :: endl ; } CTemp ( CTemp && other ) { std :: cout << \"CTemp\uff1a\u79fb\u52a8\u6784\u9020\" << std :: endl ; } }; //2.\u6ce8\u610f\u5b9e\u73b0\uff1a\u8fd4\u56de\u65f6\u4f18\u5316 CTemp foo (){ CTemp x ; return x ; //\u4f5c\u7528\u57df\u5728\u8be5\u51fd\u6570\u4e2d\u5c31\u7ed3\u675f\u4e86 } CTemp foo_move (){ CTemp x ; return std :: move ( x ); //\u4f5c\u7528\u57df\u5728\u8be5\u51fd\u6570\u4e2d\u5c31\u7ed3\u675f\u4e86 } int main ( int argc , char * argv []) { auto a = foo (); std :: cout << \"-----------\" << std :: endl ; auto b = foo_move (); return 0 ; } \u8f93\u51fa\u7ed3\u679c\u662f\uff1a CTemp\uff1a\u6784\u9020 ----------- CTemp\uff1a\u6784\u9020 CTemp\uff1a\u79fb\u52a8\u6784\u9020 \u4f1a\u53d1\u73b0\u53cd\u800c\u662f\u505a\u4e86 std::move \u7684 foo_move \u591a\u4e86\u4e00\u6b21\u6784\u9020\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u5176\u5b9e\u662f\u56e0\u4e3a\uff0c\u73b0\u4ee3\u7f16\u8bd1\u5668\u4e00\u822c\u90fd\u505a \u8fd4\u56de\u503c\u4f18\u5316 \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0e\u5176\u73b0\u5728 foo \u5185\u90e8\u6784\u9020\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf x \uff0c\u518d\u628a\u5b83\u590d\u5236\u51fa\u53bb\uff1b\u4e0d\u5982\u76f4\u63a5\u5728 foo \u51fd\u6570\u8c03\u7528\u7684\u5730\u65b9\u76f4\u63a5\u6784\u9020\u4e00\u4e2a x \u5bf9\u8c61\u3002\u8fd9\u6837\u505a\u7684\u6548\u7387\u663e\u7136\u6bd4\u79fb\u52a8\u8bed\u4e49\u8981\u9ad8\u3002 \u5728\u8fd9\u7c7b\u60c5\u51b5\u4e0b\uff0c\u4e0d\u7528 std::move \u4e3a\u4f73\u3002 \u5f53\u7136\uff0c\u8fd9\u4e5f\u4e0d\u662f\u4e00\u6982\u800c\u8bba\u7684\uff0c\u6bd4\u5982\u8fd8\u6709\u4e0d\u5c11\u5176\u5b83\u60c5\u51b5\u5728\u8fd4\u56de\u65f6\u662f\u4f7f\u7528 std::move \u7684\uff0c\u6bd4\u5982 OneFlow \u4e2d\u5c31\u53ef\u4ee5\u627e\u5230\u4f8b\u5b50\u3002 \u603b\u4e4b\uff0c\u9700\u8981\u975e\u5e38\u6df1\u523b\u7684\u7406\u89e3 std::move \u7684\u201c\u526f\u4f5c\u7528\u201d\uff0c\u624d\u80fd\u505a\u597d\u76f8\u5173\u4f18\u5316\uff0c\u63a8\u8350\u5927\u5bb6\u53ef\u4ee5\u770b\u770b copy elision \u3002","title":"\u5c40\u90e8\u53d8\u91cf\u8fd4\u56de\u65f6\uff0c\u4e0d\u8c03\u7528 std::move"},{"location":"learn_cpp/02_forward.html","text":"\u5b8c\u7f8e\u8f6c\u53d1 \u00b6 \u73b0\u4ee3 C++ \u9879\u76ee\u7684\u6e90\u7801\u4e2d\uff0c\u5e38\u5e38\u4f1a\u4f7f\u7528 std::forward \u51fd\u6570\u3002\u5b83\u662f C++ \u6807\u51c6\u5e93\u4e2d\u7684\u201c\u5b8c\u7f8e\u8f6c\u53d1\u201d\u51fd\u6570\u3002 \u672c\u6587\u4f1a\u4ecb\u7ecd\uff1a \u4ec0\u4e48\u662f\u5b8c\u7f8e\u8f6c\u53d1 \u4e07\u80fd\u5f15\u7528 std::forward \u539f\u7406\u5256\u6790 \u4ec0\u4e48\u662f\u5b8c\u7f8e\u8f6c\u53d1 \u00b6 \u5728\u67d0\u4e9b\u4ee3\u7801\u573a\u666f\u6216\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\uff0c\u4f1a\u51fa\u73b0\u53c2\u6570\u8f6c\u53d1\u7684\u9700\u6c42\u3002 \u6bd4\u5982\uff0c\u4ee5\u4e0b\u7684\u5de5\u5382\u6a21\u5f0f\uff0c\u5f88\u663e\u7136\u662f\u60f3\u901a\u8fc7 factory \u51fd\u6570\u628a\u53c2\u6570\uff0c\u4f20\u9012\u7ed9 T \u7684\u6784\u9020\u3002 template < typename T , typename Arg > shared_ptr < T > factory ( Arg arg ) { return shared_ptr < T > ( new T ( arg )); } \u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b factory \u51fd\u6570\u5c31\u50cf\u4e0d\u5b58\u5728\u4e00\u6837\uff0c T \u7684\u6784\u9020\u5c31\u50cf\u88ab\u76f4\u63a5\u8c03\u7528\u4e00\u6837\u3002\u4e0d\u4e25\u8c28\u5730\u8bf4\uff08\u4e25\u8c28\u7684\u5b9a\u4e49\u5728\u4e0b\u6587\u4e2d\uff09\uff0c\u8fd9\u5c31\u662f\u5b8c\u7f8e\u8f6c\u53d1\u3002 \u8f6c\u53d1\u53c2\u6570\u7684\u7a98\u5883 I \u00b6 \u7136\u800c\uff0c\u4ee5\u4e0a\u7684\u4ee3\u7801\u5e76\u4e0d\u5b8c\u7f8e\uff1a factory \u51fd\u6570\u7684\u53c2\u6570\u662f\u503c\u4f20\u9012\u7684\uff0c factory \u51fd\u6570\u8c03\u7528\u65f6\uff0c\u4f1a\u5148\u53d1\u751f\u4e00\u6b21\u53c2\u6570\u62f7\u8d1d\uff0c\u8fd9\u6837\u6709\u6027\u80fd\u4ee3\u4ef7\u3002 \u90a3\u81ea\u7136\u4f1a\u6709\u4eba\u60f3\u5230\uff0c\u53ef\u4ee5\u4e0d\u505a\u503c\u4f20\u9012\uff0c\u6539\u6210\u5f15\u7528\u4f20\u9012\uff0c\u63d0\u9ad8\u6027\u80fd\uff1a template < typename T , typename Arg > shared_ptr < T > factory ( Arg & arg /*\u6539\u6210\uff08\u5de6\u503c\uff09\u5f15\u7528*/ ) { return shared_ptr < T > ( new T ( arg )); } \u4f46\u662f\uff0c\u4ee5\u4e0a\u7684\u4ee3\u7801\u4e5f\u4e0d\u201c\u5b8c\u7f8e\u201d\uff0c\u9996\u5148\u7684\u95ee\u9898\u662f factory \u8c03\u7528\u65f6\uff0c\u65e0\u6cd5\u4f20\u9012\u53f3\u503c\uff1a factory < Foo , int > ( 5 /*\u53f3\u503c*/ ); //\u51fa\u9519\uff0c\u65e0\u6cd5\u4f20\u9012\u53f3\u503c \u867d\u7136\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 const \u5f15\u7528\uff08\u52c9\u5f3a\uff09\u89e3\u51b3\uff1a template < typename T , typename Arg > shared_ptr < T > factory ( Arg const & arg ) { return shared_ptr < T > ( new T ( arg )); } \u4f46\u662f\u5b83\u5e76\u4e0d\u4f18\u96c5\uff0c\u5f53\u6709\u591a\u4e2a\u5f62\u53c2\u65f6\uff0c\u7528\u8fd9\u79cd\u65b9\u6cd5\u89e3\u51b3\u53f3\u503c\u4f20\u9012\u7684\u95ee\u9898\uff0c\u9700\u8981\u4e3a\u6bcf\u4e2a\u5f62\u53c2\u5b9e\u73b0 const \u548c\u975e cosnt \u7248\u672c\uff0c\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u7684\u6392\u5217\u7ec4\u5408\u95ee\u9898\u3002 \u6bd4\u5982\uff0c\u5047\u8bbe factory \u6709\u4e09\u4e2a\u5f62\u53c2\uff0c\u90a3\u4e48\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u7684\u91cd\u8f7d\uff1a factory ( const T & , const T & , const T & ); factory ( T & , const T & , const T & ); factory ( const T & , T & , const T & ); factory ( const T & , const T & , T & ); factory ( const T & , T & , T & ); factory ( T & , const T & , T & ); factory ( T & , T & , const T & ); factory ( T & , T & , T & ); \u8f6c\u53d1\u7684\u7a98\u5883 II \u00b6 \u5176\u6b21\uff0c\u8fd9\u79cd\u65b9\u5f0f \u66f4\u672c\u8d28\u7684\u7f3a\u70b9 \u662f\uff1a factory \u5185\u90e8\uff0c\u56e0\u4e3a arg \u4e00\u5b9a\u662f\u5de6\u503c\uff0c\u65e0\u6cd5\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\uff1a template < typename T , typename Arg > shared_ptr < T > factory ( Arg const & arg ) { return shared_ptr < T > ( new T ( arg /* arg \u6709\u540d\u5b57\uff0c\u4e00\u5b9a\u662f\u5de6\u503c\uff0c\u65e0\u6cd5\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49*/ )); } \u5b8c\u7f8e\u8f6c\u53d1 std::forward \u00b6 \u6211\u4eec\u4e4b\u524d\u6bd4\u8f83\u53cb\u597d\u4f46\u662f\u4e0d\u4e25\u8c28\u5730\u5b9a\u4e49\u4e86\u201c\u5b8c\u7f8e\u8f6c\u53d1\u201d\u662f\u201c\u5916\u5c42 warpper\uff08 factory \u51fd\u6570\uff09\u5c31\u50cf\u4e0d\u5b58\u5728\uff0c\u5185\u5c42\u51fd\u6570\u50cf\u662f\u88ab\u76f4\u63a5\u8c03\u7528\u4e00\u6837\u201d\u3002 \u5b8c\u7f8e\u8f6c\u53d1\u7684\u4e25\u8c28\u5b9a\u4e49\u5176\u5b9e\u5e94\u8be5\u662f\uff1a \u8c03\u7528 wrapper \uff08 factory \uff09\u65f6\u4f20\u9012\u7684\u662f\u5de6\u503c\uff0c\u5185\u5c42\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u5f97\u5230\u7684\u5c31\u662f\u5de6\u503c \u8c03\u7528 wrapper \uff08 factory \uff09\u65f6\u4f20\u9012\u7684\u662f\u53f3\u503c\uff0c\u5185\u5c42\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u5f97\u5230\u7684\u5c31\u662f\u53f3\u503c \u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u4f7f\u7528 std::forward \u5c31\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\u3002 \u770b\u4ee5\u4e0b\u7684\u4f8b\u5b50\uff1a #include <iostream> #include <utility> #include <memory> using namespace std ; class CBase { public : CBase ( int & ){ cout << \"CBase(int&)\" << endl ; } CBase ( int && ){ cout << \"CBase(int&&)\" << endl ; } }; template < typename T , typename Arg > shared_ptr < T > facotry ( Arg && arg ){ return shared_ptr < T > ( new T ( std :: forward < Arg > ( arg ))); } int main () { int value = 5 ; auto p1 = facotry < CBase > ( 5 ); auto p2 = facotry < CBase > ( value ); } \u4f1a\u8f93\u51fa\uff1a CBase ( int &&) # \u5bf9\u5e94\u4e86 facotry<CBase>(5); CBase ( int & ) # \u5bf9\u5e94\u4e86 facotry<CBase>(value); \u8fd9\u8bf4\u660e forward \u786e\u5b9e\u201c\u5b8c\u7f8e\u8f6c\u53d1\u201d\u4e86\u53c2\u6570\uff1a \u5f53\u8c03\u7528 facotry<CBase>(5) \u65f6\uff0c 5 \u662f\u53f3\u503c\uff0c\u4f20\u9012\u7ed9 new T(std::forward<Arg>(arg)) \u7684\u4e5f\u662f\u53f3\u503c\uff0c\u6700\u7ec8\u89e6\u53d1\u7684\u662f CBase(int&&) \u5f53\u8c03\u7528 facotry<CBase>(value) \u65f6\uff0c value \u662f\u5de6\u503c\uff0c\u4f20\u9012\u7ed9 new T(std::forward<Arg>(arg)) \u7684\u4e5f\u662f\u5de6\u503c\uff0c\u6700\u7ec8\u89e6\u53d1\u7684\u662f CBase(int&) \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u7b49\u6211\u4eec\u5b66\u4e60\u4e86\u201c\u4e07\u80fd\u5f15\u7528\u201d\u548c\u201c\u5f15\u7528\u6298\u53e0\u201d\u540e\uff0c\u5c31\u53ef\u4ee5\u5256\u6790 std::forward \u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\u3002 std::forward \u4ee3\u7801\u5256\u6790 \u00b6 \u8981\u89e3\u8bfb std::forward \u5185\u90e8\u4ee3\u7801\u5b9e\u73b0\uff0c\u9700\u8981\u5148\u638c\u63e1 \u4e07\u80fd\u5f15\u7528 \u548c \u5f15\u7528\u6298\u53e0 \u7684\u77e5\u8bc6\u3002 \u4e07\u80fd\u5f15\u7528 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u666e\u901a\u51fd\u6570\uff0c\u5b83\u7684\u5f62\u53c2\uff0c\u8981\u4e48\u63a5\u53d7\u5de6\u503c\u3001\u8981\u4e48\u63a5\u53d7\u53f3\u503c\u7c7b\u578b\u3002\u5c31\u50cf\u6211\u4eec\u8fd9\u91cc\u7684 foo1 \u53ea\u80fd\u63a5\u6536\u5de6\u503c\uff1b foo2 \u53ea\u80fd\u63a5\u6536\u53f3\u503c\u3002 #include <iostream> #include <utility> #include <memory> using namespace std ; void foo1 ( int & ){ cout << \"foo(int&)\" << endl ; } void foo2 ( int && ){ cout << \"foo(int&&)\" << endl ; } int main () { int value = 5 ; foo1 ( 5 ); // \u9519 foo1 ( value ); // \u5bf9 foo2 ( 5 ); // \u5bf9 foo2 ( value ); // \u9519 } \u4f46\u662f\uff0c\u4ece C++11 \u5f00\u59cb\uff0c\u89c4\u5b9a\u4e86\u4e00\u79cd\u7279\u6b8a\u7684\u5f62\u5f0f\u4e0b\uff0c\u51fd\u6570\u5f62\u53c2\u65e2\u53ef\u4ee5\u5339\u914d\u5de6\u503c\uff0c\u4e5f\u53ef\u4ee5\u5339\u914d\u53f3\u503c\u3002 \u8fd9\u79cd\u60c5\u51b5\u5fc5\u987b\u662f\u6a21\u677f\u7684\u5f62\u5f0f\uff0c\u5e76\u4e14\u4ee5 && \u4f5c\u4e3a\u5f62\u53c2\u6570\u3002\u5b83\u88ab\u79f0\u4e3a\u201c\u4e07\u80fd\u5f15\u7528\u201d\uff08\u82f1\u6587\u4e3a universal reference \u6216 forwarding refference\uff09\u3002 \u4ee5\u4e0b\u7684 foo \u7684\u5f62\u53c2\u5c31\u662f\u201c\u4e07\u80fd\u5f15\u7528\u201d\uff1a template < typename T > void foo ( T && arg ) { cout << \"foo(T&& arg)\" << endl ; } \u5b83\u65e2\u53ef\u4ee5\u5339\u914d\u5de6\u503c\uff0c\u53c8\u53ef\u4ee5\u5339\u914d\u53f3\u503c\uff1a int main () { int value = 5 ; foo ( 5 ); // \u53ef\u4ee5 foo ( value ); // \u53ef\u4ee5 } \u90a3\u4e3a\u4ec0\u4e48\u8fd9\u79cd\u795e\u5947\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u65e2\u5339\u914d\u5de6\u503c\uff0c\u53c8\u5339\u914d\u53f3\u503c\u5462\uff0c\u5176\u5b9e\u662f\u56e0\u4e3a C++11 \u5f15\u5165\u4e86\u5f15\u7528\u6298\u53e0\u3002 \u5f15\u7528\u6298\u53e0 \u00b6 \u5728 C++11 \u4e4b\u524d\uff0c\u662f\u4e0d\u5141\u8bb8\u5f15\u7528\u7684\u5f15\u7528\u5b58\u5728\u7684\u3002\u4f46\u662f C++11 \u4e4b\u540e\uff0c\u5f15\u7528\u7684\u5f15\u7528\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u5141\u8bb8\u5b58\u5728\uff0c\u4ed6\u4eec\u4f1a\u5728\u7f16\u8bd1\u65f6\uff0c\u88ab\u81ea\u52a8\u5316\u7b80\u4e3a\u5de6\u503c\u5f15\u7528\u6216\u8005\u53f3\u503c\u5f15\u7528\uff0c\u5316\u7b80\u7684\u8fc7\u7a0b\u79f0\u4e3a \u5f15\u7528\u6298\u53e0 \u3002 \u5316\u7b80\u7684\u89c4\u5219\u5982\u4e0b\uff1a T & & => T & T && & => T & T & && => T & T && && => T && \u5b83\u662f\u600e\u4e48\u5728\u201c\u4e07\u80fd\u5f15\u7528\u201d\u4e2d\u53d1\u6325\u4f5c\u7528\u7684\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a C++ \u91cc\u89c4\u5b9a\u4e86\u4e07\u80fd\u5f15\u7528\uff08\u6a21\u677f\uff09\u88ab\u8c03\u7528\u65f6\uff0c\u6a21\u677f\u53c2\u6570\u7684\u5c55\u5f00\u89c4\u5219\u5982\u4e0b\uff1a \u5f53 foo \u8c03\u7528\u65f6\u5b9e\u53c2\u4e3a\u7c7b\u578bT\u7684\u5de6\u503c\uff0c\u90a3\u4e48\u6a21\u677fT\u4f1a\u88ab\u5c55\u5f00\u4e3a T& \u5f53 foo \u8c03\u7528\u65f6\u5b9e\u53c2\u4e3a\u7c7b\u578bT\u7684\u53f3\u503c\uff0c\u90a3\u4e48\u6a21\u677fT\u4f1a\u88ab\u5c55\u5f00\u4e3a T \u6211\u4eec\u56de\u987e\u6211\u4eec\u521a\u624d\u7684\u4ee3\u7801\uff1a template < typename T > void foo ( T && arg ) { cout << \"foo(T&& arg)\" << endl ; } int main () { int value = 5 ; foo ( value ); // \u5de6\u503c\uff0c\u6a21\u677fT \u88ab\u5c55\u5f00\u4e3a int& foo ( 5 ); // \u53f3\u503c\uff0c\u6a21\u677fT \u88ab\u5c55\u5f00\u4e3a int } \u6240\u4ee5\u5f53 foo(value) \u8c03\u7528\u65f6\uff0c void foo(T&& arg) \u4e2d\u7684 T \u4f1a\u88ab\u5c55\u5f00\u4e3a int& \uff0c\u51fd\u6570\u88ab\u5c55\u5f00\u4e3a void foo(int& && arg) \uff0c\u7ecf\u8fc7\u5f15\u7528\u6298\u53e0\uff0c\u5f97\u5230\u7684\u662f void foo(int& arg) \uff0c\u5339\u914d\u5de6\u503c\u3002 \u7c7b\u4f3c\u7684\uff0c\u5f53 foo(5) \u8c03\u7528\u65f6\uff0c void foo(T&& arg) \u4e2d\u7684 T \u4f1a\u88ab\u5c55\u5f00\u4e3a int \uff0c\u51fd\u6570\u88ab\u5c55\u5f00\u4e3a void foo(int && arg) \uff0c\u5339\u914d\u53f3\u503c\u3002 std::forward \u7684\u539f\u7406\u5256\u6790 \u00b6 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6765\u67e5\u770b std::forward \u4e2d\u7684\u5b9e\u73b0\u539f\u7406\u4e86\u3002\u67e5\u770b\u5e93\u51fd\u6570\u4e2d\u7684\u539f\u59cb\u5b9e\u73b0\uff1a template < typename _Tp > constexpr _Tp && forward ( typename std :: remove_reference < _Tp >:: type & __t ) noexcept { return static_cast < _Tp &&> ( __t ); } template < typename _Tp > constexpr _Tp && forward ( typename std :: remove_reference < _Tp >:: type && __t ) noexcept { static_assert ( ! std :: is_lvalue_reference < _Tp >:: value , \"template argument\" \" substituting _Tp is an lvalue reference type\" ); return static_cast < _Tp &&> ( __t ); } \u4e0e\u4e0a\u4e00\u7bc7\u6587\u7ae0\u7c7b\u4f3c\uff0c\u53bb\u6389 constexpr \u3001 static_assert \u3001 noexcept \u8fd9\u4e9b\u975e\u6838\u5fc3\u91cd\u70b9\uff0c\u4ee5\u53ca\u7b80\u5316\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4ecb\u7ecd\u8fc7\u7684 remove_reference \u4e4b\u540e\uff1a template < typename _Tp > _Tp && forward ( _TP & __t ) { return static_cast < _Tp &&> ( __t ); } template < typename _Tp > _Tp && forward ( _TP && __t ){ return static_cast < _Tp &&> ( __t ); } \u5f53 forward \u8c03\u7528\u65f6\u4f20\u9012\u7684\u662f\u5de6\u503c\u65f6\uff0c\u4f1a\u5339\u914d\u6a21\u677f\u7279\u4f8b\uff1a template < typename _Tp > _Tp && forward ( _TP & __t ) { return static_cast < _Tp &&> ( __t ); } _TP \u4f1a\u88ab\u5c55\u5f00\u4e3a T& \uff1a T & && forward ( T & & __t ) { return static_cast < T & &&> ( __t ); } \u7ecf\u5f15\u7528\u6298\u53e0\u540e\u5f97\u5230\uff1a T & forward ( T & __t ) { return static_cast < T &> ( __t ); } \u4e5f\u5c31\u8bf4\u628a __t \u8f6c\u4e3a\u5de6\u503c\u5f15\u7528\u7c7b\u578b\u540e\u8fd4\u56de\u3002 \u7c7b\u4f3c\u5730\uff0c\u5982\u679c forward \u8c03\u7528\u65f6\u4f20\u9012\u7684\u662f\u53f3\u503c\u65f6\uff0c\u90a3\u4e48\u4f1a\u5339\u914d\u6a21\u677f\u7279\u4f8b\uff1a template < typename _Tp > _Tp && forward ( _TP && __t ){ return static_cast < _Tp &&> ( __t ); } _TP \u4f1a\u88ab\u5c55\u5f00\u4e3a T \uff1a T && forward ( T && __t ){ return static_cast < T &&> ( __t ); } \u4e5f\u5c31\u8bf4\u628a __t \u8f6c\u4e3a\u53f3\u503c\u5f15\u7528\u7c7b\u578b\u540e\u8fd4\u56de\u3002","title":"\u5b8c\u7f8e\u8f6c\u53d1"},{"location":"learn_cpp/02_forward.html#_1","text":"\u73b0\u4ee3 C++ \u9879\u76ee\u7684\u6e90\u7801\u4e2d\uff0c\u5e38\u5e38\u4f1a\u4f7f\u7528 std::forward \u51fd\u6570\u3002\u5b83\u662f C++ \u6807\u51c6\u5e93\u4e2d\u7684\u201c\u5b8c\u7f8e\u8f6c\u53d1\u201d\u51fd\u6570\u3002 \u672c\u6587\u4f1a\u4ecb\u7ecd\uff1a \u4ec0\u4e48\u662f\u5b8c\u7f8e\u8f6c\u53d1 \u4e07\u80fd\u5f15\u7528 std::forward \u539f\u7406\u5256\u6790","title":"\u5b8c\u7f8e\u8f6c\u53d1"},{"location":"learn_cpp/02_forward.html#_2","text":"\u5728\u67d0\u4e9b\u4ee3\u7801\u573a\u666f\u6216\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\uff0c\u4f1a\u51fa\u73b0\u53c2\u6570\u8f6c\u53d1\u7684\u9700\u6c42\u3002 \u6bd4\u5982\uff0c\u4ee5\u4e0b\u7684\u5de5\u5382\u6a21\u5f0f\uff0c\u5f88\u663e\u7136\u662f\u60f3\u901a\u8fc7 factory \u51fd\u6570\u628a\u53c2\u6570\uff0c\u4f20\u9012\u7ed9 T \u7684\u6784\u9020\u3002 template < typename T , typename Arg > shared_ptr < T > factory ( Arg arg ) { return shared_ptr < T > ( new T ( arg )); } \u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b factory \u51fd\u6570\u5c31\u50cf\u4e0d\u5b58\u5728\u4e00\u6837\uff0c T \u7684\u6784\u9020\u5c31\u50cf\u88ab\u76f4\u63a5\u8c03\u7528\u4e00\u6837\u3002\u4e0d\u4e25\u8c28\u5730\u8bf4\uff08\u4e25\u8c28\u7684\u5b9a\u4e49\u5728\u4e0b\u6587\u4e2d\uff09\uff0c\u8fd9\u5c31\u662f\u5b8c\u7f8e\u8f6c\u53d1\u3002","title":"\u4ec0\u4e48\u662f\u5b8c\u7f8e\u8f6c\u53d1"},{"location":"learn_cpp/02_forward.html#i","text":"\u7136\u800c\uff0c\u4ee5\u4e0a\u7684\u4ee3\u7801\u5e76\u4e0d\u5b8c\u7f8e\uff1a factory \u51fd\u6570\u7684\u53c2\u6570\u662f\u503c\u4f20\u9012\u7684\uff0c factory \u51fd\u6570\u8c03\u7528\u65f6\uff0c\u4f1a\u5148\u53d1\u751f\u4e00\u6b21\u53c2\u6570\u62f7\u8d1d\uff0c\u8fd9\u6837\u6709\u6027\u80fd\u4ee3\u4ef7\u3002 \u90a3\u81ea\u7136\u4f1a\u6709\u4eba\u60f3\u5230\uff0c\u53ef\u4ee5\u4e0d\u505a\u503c\u4f20\u9012\uff0c\u6539\u6210\u5f15\u7528\u4f20\u9012\uff0c\u63d0\u9ad8\u6027\u80fd\uff1a template < typename T , typename Arg > shared_ptr < T > factory ( Arg & arg /*\u6539\u6210\uff08\u5de6\u503c\uff09\u5f15\u7528*/ ) { return shared_ptr < T > ( new T ( arg )); } \u4f46\u662f\uff0c\u4ee5\u4e0a\u7684\u4ee3\u7801\u4e5f\u4e0d\u201c\u5b8c\u7f8e\u201d\uff0c\u9996\u5148\u7684\u95ee\u9898\u662f factory \u8c03\u7528\u65f6\uff0c\u65e0\u6cd5\u4f20\u9012\u53f3\u503c\uff1a factory < Foo , int > ( 5 /*\u53f3\u503c*/ ); //\u51fa\u9519\uff0c\u65e0\u6cd5\u4f20\u9012\u53f3\u503c \u867d\u7136\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 const \u5f15\u7528\uff08\u52c9\u5f3a\uff09\u89e3\u51b3\uff1a template < typename T , typename Arg > shared_ptr < T > factory ( Arg const & arg ) { return shared_ptr < T > ( new T ( arg )); } \u4f46\u662f\u5b83\u5e76\u4e0d\u4f18\u96c5\uff0c\u5f53\u6709\u591a\u4e2a\u5f62\u53c2\u65f6\uff0c\u7528\u8fd9\u79cd\u65b9\u6cd5\u89e3\u51b3\u53f3\u503c\u4f20\u9012\u7684\u95ee\u9898\uff0c\u9700\u8981\u4e3a\u6bcf\u4e2a\u5f62\u53c2\u5b9e\u73b0 const \u548c\u975e cosnt \u7248\u672c\uff0c\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u7684\u6392\u5217\u7ec4\u5408\u95ee\u9898\u3002 \u6bd4\u5982\uff0c\u5047\u8bbe factory \u6709\u4e09\u4e2a\u5f62\u53c2\uff0c\u90a3\u4e48\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u7684\u91cd\u8f7d\uff1a factory ( const T & , const T & , const T & ); factory ( T & , const T & , const T & ); factory ( const T & , T & , const T & ); factory ( const T & , const T & , T & ); factory ( const T & , T & , T & ); factory ( T & , const T & , T & ); factory ( T & , T & , const T & ); factory ( T & , T & , T & );","title":"\u8f6c\u53d1\u53c2\u6570\u7684\u7a98\u5883 I"},{"location":"learn_cpp/02_forward.html#ii","text":"\u5176\u6b21\uff0c\u8fd9\u79cd\u65b9\u5f0f \u66f4\u672c\u8d28\u7684\u7f3a\u70b9 \u662f\uff1a factory \u5185\u90e8\uff0c\u56e0\u4e3a arg \u4e00\u5b9a\u662f\u5de6\u503c\uff0c\u65e0\u6cd5\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\uff1a template < typename T , typename Arg > shared_ptr < T > factory ( Arg const & arg ) { return shared_ptr < T > ( new T ( arg /* arg \u6709\u540d\u5b57\uff0c\u4e00\u5b9a\u662f\u5de6\u503c\uff0c\u65e0\u6cd5\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49*/ )); }","title":"\u8f6c\u53d1\u7684\u7a98\u5883 II"},{"location":"learn_cpp/02_forward.html#stdforward","text":"\u6211\u4eec\u4e4b\u524d\u6bd4\u8f83\u53cb\u597d\u4f46\u662f\u4e0d\u4e25\u8c28\u5730\u5b9a\u4e49\u4e86\u201c\u5b8c\u7f8e\u8f6c\u53d1\u201d\u662f\u201c\u5916\u5c42 warpper\uff08 factory \u51fd\u6570\uff09\u5c31\u50cf\u4e0d\u5b58\u5728\uff0c\u5185\u5c42\u51fd\u6570\u50cf\u662f\u88ab\u76f4\u63a5\u8c03\u7528\u4e00\u6837\u201d\u3002 \u5b8c\u7f8e\u8f6c\u53d1\u7684\u4e25\u8c28\u5b9a\u4e49\u5176\u5b9e\u5e94\u8be5\u662f\uff1a \u8c03\u7528 wrapper \uff08 factory \uff09\u65f6\u4f20\u9012\u7684\u662f\u5de6\u503c\uff0c\u5185\u5c42\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u5f97\u5230\u7684\u5c31\u662f\u5de6\u503c \u8c03\u7528 wrapper \uff08 factory \uff09\u65f6\u4f20\u9012\u7684\u662f\u53f3\u503c\uff0c\u5185\u5c42\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u5f97\u5230\u7684\u5c31\u662f\u53f3\u503c \u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u4f7f\u7528 std::forward \u5c31\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\u3002 \u770b\u4ee5\u4e0b\u7684\u4f8b\u5b50\uff1a #include <iostream> #include <utility> #include <memory> using namespace std ; class CBase { public : CBase ( int & ){ cout << \"CBase(int&)\" << endl ; } CBase ( int && ){ cout << \"CBase(int&&)\" << endl ; } }; template < typename T , typename Arg > shared_ptr < T > facotry ( Arg && arg ){ return shared_ptr < T > ( new T ( std :: forward < Arg > ( arg ))); } int main () { int value = 5 ; auto p1 = facotry < CBase > ( 5 ); auto p2 = facotry < CBase > ( value ); } \u4f1a\u8f93\u51fa\uff1a CBase ( int &&) # \u5bf9\u5e94\u4e86 facotry<CBase>(5); CBase ( int & ) # \u5bf9\u5e94\u4e86 facotry<CBase>(value); \u8fd9\u8bf4\u660e forward \u786e\u5b9e\u201c\u5b8c\u7f8e\u8f6c\u53d1\u201d\u4e86\u53c2\u6570\uff1a \u5f53\u8c03\u7528 facotry<CBase>(5) \u65f6\uff0c 5 \u662f\u53f3\u503c\uff0c\u4f20\u9012\u7ed9 new T(std::forward<Arg>(arg)) \u7684\u4e5f\u662f\u53f3\u503c\uff0c\u6700\u7ec8\u89e6\u53d1\u7684\u662f CBase(int&&) \u5f53\u8c03\u7528 facotry<CBase>(value) \u65f6\uff0c value \u662f\u5de6\u503c\uff0c\u4f20\u9012\u7ed9 new T(std::forward<Arg>(arg)) \u7684\u4e5f\u662f\u5de6\u503c\uff0c\u6700\u7ec8\u89e6\u53d1\u7684\u662f CBase(int&) \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u7b49\u6211\u4eec\u5b66\u4e60\u4e86\u201c\u4e07\u80fd\u5f15\u7528\u201d\u548c\u201c\u5f15\u7528\u6298\u53e0\u201d\u540e\uff0c\u5c31\u53ef\u4ee5\u5256\u6790 std::forward \u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\u3002","title":"\u5b8c\u7f8e\u8f6c\u53d1 std::forward"},{"location":"learn_cpp/02_forward.html#stdforward_1","text":"\u8981\u89e3\u8bfb std::forward \u5185\u90e8\u4ee3\u7801\u5b9e\u73b0\uff0c\u9700\u8981\u5148\u638c\u63e1 \u4e07\u80fd\u5f15\u7528 \u548c \u5f15\u7528\u6298\u53e0 \u7684\u77e5\u8bc6\u3002","title":"std::forward \u4ee3\u7801\u5256\u6790"},{"location":"learn_cpp/02_forward.html#_3","text":"\u5bf9\u4e8e\u4e00\u4e2a\u666e\u901a\u51fd\u6570\uff0c\u5b83\u7684\u5f62\u53c2\uff0c\u8981\u4e48\u63a5\u53d7\u5de6\u503c\u3001\u8981\u4e48\u63a5\u53d7\u53f3\u503c\u7c7b\u578b\u3002\u5c31\u50cf\u6211\u4eec\u8fd9\u91cc\u7684 foo1 \u53ea\u80fd\u63a5\u6536\u5de6\u503c\uff1b foo2 \u53ea\u80fd\u63a5\u6536\u53f3\u503c\u3002 #include <iostream> #include <utility> #include <memory> using namespace std ; void foo1 ( int & ){ cout << \"foo(int&)\" << endl ; } void foo2 ( int && ){ cout << \"foo(int&&)\" << endl ; } int main () { int value = 5 ; foo1 ( 5 ); // \u9519 foo1 ( value ); // \u5bf9 foo2 ( 5 ); // \u5bf9 foo2 ( value ); // \u9519 } \u4f46\u662f\uff0c\u4ece C++11 \u5f00\u59cb\uff0c\u89c4\u5b9a\u4e86\u4e00\u79cd\u7279\u6b8a\u7684\u5f62\u5f0f\u4e0b\uff0c\u51fd\u6570\u5f62\u53c2\u65e2\u53ef\u4ee5\u5339\u914d\u5de6\u503c\uff0c\u4e5f\u53ef\u4ee5\u5339\u914d\u53f3\u503c\u3002 \u8fd9\u79cd\u60c5\u51b5\u5fc5\u987b\u662f\u6a21\u677f\u7684\u5f62\u5f0f\uff0c\u5e76\u4e14\u4ee5 && \u4f5c\u4e3a\u5f62\u53c2\u6570\u3002\u5b83\u88ab\u79f0\u4e3a\u201c\u4e07\u80fd\u5f15\u7528\u201d\uff08\u82f1\u6587\u4e3a universal reference \u6216 forwarding refference\uff09\u3002 \u4ee5\u4e0b\u7684 foo \u7684\u5f62\u53c2\u5c31\u662f\u201c\u4e07\u80fd\u5f15\u7528\u201d\uff1a template < typename T > void foo ( T && arg ) { cout << \"foo(T&& arg)\" << endl ; } \u5b83\u65e2\u53ef\u4ee5\u5339\u914d\u5de6\u503c\uff0c\u53c8\u53ef\u4ee5\u5339\u914d\u53f3\u503c\uff1a int main () { int value = 5 ; foo ( 5 ); // \u53ef\u4ee5 foo ( value ); // \u53ef\u4ee5 } \u90a3\u4e3a\u4ec0\u4e48\u8fd9\u79cd\u795e\u5947\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u65e2\u5339\u914d\u5de6\u503c\uff0c\u53c8\u5339\u914d\u53f3\u503c\u5462\uff0c\u5176\u5b9e\u662f\u56e0\u4e3a C++11 \u5f15\u5165\u4e86\u5f15\u7528\u6298\u53e0\u3002","title":"\u4e07\u80fd\u5f15\u7528"},{"location":"learn_cpp/02_forward.html#_4","text":"\u5728 C++11 \u4e4b\u524d\uff0c\u662f\u4e0d\u5141\u8bb8\u5f15\u7528\u7684\u5f15\u7528\u5b58\u5728\u7684\u3002\u4f46\u662f C++11 \u4e4b\u540e\uff0c\u5f15\u7528\u7684\u5f15\u7528\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u5141\u8bb8\u5b58\u5728\uff0c\u4ed6\u4eec\u4f1a\u5728\u7f16\u8bd1\u65f6\uff0c\u88ab\u81ea\u52a8\u5316\u7b80\u4e3a\u5de6\u503c\u5f15\u7528\u6216\u8005\u53f3\u503c\u5f15\u7528\uff0c\u5316\u7b80\u7684\u8fc7\u7a0b\u79f0\u4e3a \u5f15\u7528\u6298\u53e0 \u3002 \u5316\u7b80\u7684\u89c4\u5219\u5982\u4e0b\uff1a T & & => T & T && & => T & T & && => T & T && && => T && \u5b83\u662f\u600e\u4e48\u5728\u201c\u4e07\u80fd\u5f15\u7528\u201d\u4e2d\u53d1\u6325\u4f5c\u7528\u7684\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a C++ \u91cc\u89c4\u5b9a\u4e86\u4e07\u80fd\u5f15\u7528\uff08\u6a21\u677f\uff09\u88ab\u8c03\u7528\u65f6\uff0c\u6a21\u677f\u53c2\u6570\u7684\u5c55\u5f00\u89c4\u5219\u5982\u4e0b\uff1a \u5f53 foo \u8c03\u7528\u65f6\u5b9e\u53c2\u4e3a\u7c7b\u578bT\u7684\u5de6\u503c\uff0c\u90a3\u4e48\u6a21\u677fT\u4f1a\u88ab\u5c55\u5f00\u4e3a T& \u5f53 foo \u8c03\u7528\u65f6\u5b9e\u53c2\u4e3a\u7c7b\u578bT\u7684\u53f3\u503c\uff0c\u90a3\u4e48\u6a21\u677fT\u4f1a\u88ab\u5c55\u5f00\u4e3a T \u6211\u4eec\u56de\u987e\u6211\u4eec\u521a\u624d\u7684\u4ee3\u7801\uff1a template < typename T > void foo ( T && arg ) { cout << \"foo(T&& arg)\" << endl ; } int main () { int value = 5 ; foo ( value ); // \u5de6\u503c\uff0c\u6a21\u677fT \u88ab\u5c55\u5f00\u4e3a int& foo ( 5 ); // \u53f3\u503c\uff0c\u6a21\u677fT \u88ab\u5c55\u5f00\u4e3a int } \u6240\u4ee5\u5f53 foo(value) \u8c03\u7528\u65f6\uff0c void foo(T&& arg) \u4e2d\u7684 T \u4f1a\u88ab\u5c55\u5f00\u4e3a int& \uff0c\u51fd\u6570\u88ab\u5c55\u5f00\u4e3a void foo(int& && arg) \uff0c\u7ecf\u8fc7\u5f15\u7528\u6298\u53e0\uff0c\u5f97\u5230\u7684\u662f void foo(int& arg) \uff0c\u5339\u914d\u5de6\u503c\u3002 \u7c7b\u4f3c\u7684\uff0c\u5f53 foo(5) \u8c03\u7528\u65f6\uff0c void foo(T&& arg) \u4e2d\u7684 T \u4f1a\u88ab\u5c55\u5f00\u4e3a int \uff0c\u51fd\u6570\u88ab\u5c55\u5f00\u4e3a void foo(int && arg) \uff0c\u5339\u914d\u53f3\u503c\u3002","title":"\u5f15\u7528\u6298\u53e0"},{"location":"learn_cpp/02_forward.html#stdforward_2","text":"\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6765\u67e5\u770b std::forward \u4e2d\u7684\u5b9e\u73b0\u539f\u7406\u4e86\u3002\u67e5\u770b\u5e93\u51fd\u6570\u4e2d\u7684\u539f\u59cb\u5b9e\u73b0\uff1a template < typename _Tp > constexpr _Tp && forward ( typename std :: remove_reference < _Tp >:: type & __t ) noexcept { return static_cast < _Tp &&> ( __t ); } template < typename _Tp > constexpr _Tp && forward ( typename std :: remove_reference < _Tp >:: type && __t ) noexcept { static_assert ( ! std :: is_lvalue_reference < _Tp >:: value , \"template argument\" \" substituting _Tp is an lvalue reference type\" ); return static_cast < _Tp &&> ( __t ); } \u4e0e\u4e0a\u4e00\u7bc7\u6587\u7ae0\u7c7b\u4f3c\uff0c\u53bb\u6389 constexpr \u3001 static_assert \u3001 noexcept \u8fd9\u4e9b\u975e\u6838\u5fc3\u91cd\u70b9\uff0c\u4ee5\u53ca\u7b80\u5316\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4ecb\u7ecd\u8fc7\u7684 remove_reference \u4e4b\u540e\uff1a template < typename _Tp > _Tp && forward ( _TP & __t ) { return static_cast < _Tp &&> ( __t ); } template < typename _Tp > _Tp && forward ( _TP && __t ){ return static_cast < _Tp &&> ( __t ); } \u5f53 forward \u8c03\u7528\u65f6\u4f20\u9012\u7684\u662f\u5de6\u503c\u65f6\uff0c\u4f1a\u5339\u914d\u6a21\u677f\u7279\u4f8b\uff1a template < typename _Tp > _Tp && forward ( _TP & __t ) { return static_cast < _Tp &&> ( __t ); } _TP \u4f1a\u88ab\u5c55\u5f00\u4e3a T& \uff1a T & && forward ( T & & __t ) { return static_cast < T & &&> ( __t ); } \u7ecf\u5f15\u7528\u6298\u53e0\u540e\u5f97\u5230\uff1a T & forward ( T & __t ) { return static_cast < T &> ( __t ); } \u4e5f\u5c31\u8bf4\u628a __t \u8f6c\u4e3a\u5de6\u503c\u5f15\u7528\u7c7b\u578b\u540e\u8fd4\u56de\u3002 \u7c7b\u4f3c\u5730\uff0c\u5982\u679c forward \u8c03\u7528\u65f6\u4f20\u9012\u7684\u662f\u53f3\u503c\u65f6\uff0c\u90a3\u4e48\u4f1a\u5339\u914d\u6a21\u677f\u7279\u4f8b\uff1a template < typename _Tp > _Tp && forward ( _TP && __t ){ return static_cast < _Tp &&> ( __t ); } _TP \u4f1a\u88ab\u5c55\u5f00\u4e3a T \uff1a T && forward ( T && __t ){ return static_cast < T &&> ( __t ); } \u4e5f\u5c31\u8bf4\u628a __t \u8f6c\u4e3a\u53f3\u503c\u5f15\u7528\u7c7b\u578b\u540e\u8fd4\u56de\u3002","title":"std::forward \u7684\u539f\u7406\u5256\u6790"},{"location":"learn_cpp/03_varadic_template.html","text":"\u53ef\u53d8\u53c2\u6a21\u677f \u00b6 \u4ec0\u4e48\u662f\u53ef\u53d8\u53c2 \u00b6 \u5728\u4ecb\u7ecd\u53d8\u53c2\u6a21\u677f\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8bb2\u4e0b\uff08\u53ef\uff09\u53d8\u53c2\u51fd\u6570\uff0c\u4ed6\u4eec\u4e24\u8005\u867d\u7136\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb\uff0c \u4f46\u662f\u6709\u7c7b\u4f3c\u7684\u76f4\u89c2\u8ba4\u8bc6\u3002 \u4ec0\u4e48\u662f\u53d8\u53c2\u51fd\u6570\u5462\uff0c\u5b66\u8fc7 C \u8bed\u8a00\u7684\u4eba\uff0c\u4e0d\u4e00\u5b9a\u542c\u8bf4\u8fc7\u8fd9\u4e2a\u540d\u5b57\uff0c\u4f46\u4e00\u5b9a\u5df2\u7ecf\u7528\u8fc7\u53d8\u53c2\u51fd\u6570\u3002\u56e0\u4e3a printf \u5c31\u662f\u53d8\u53c2\u51fd\u6570\u3002 \u6240\u8c13\u53d8\u53c2\u51fd\u6570\uff0c\u5c31\u662f\u8c03\u7528\u65f6\u4f20\u9012\u7684\u53c2\u6570\u4e2a\u6570\u662f\u53ef\u4ee5\u53d8\u5316\u7684\u3002\u6bd4\u5982 printf \uff1a printf ( \"%d, %d\" , 10 , 20 ); printf ( \"%d, %d, %d\" , 10 , 20 , 30 ); \u800c\u6211\u4eec\u5b9a\u4e49\u7684\u666e\u901a\u51fd\u6570\u5374\u4e0d\u80fd\u8fd9\u6837\uff0c\u53c2\u6570\u4e2a\u6570\u662f\u786e\u5b9a\u7684\uff1a int foo ( int , int ); // \u53ea\u80fd2\u4e2a\u53c2\u6570 int foo ( int , int , int ); // \u53ea\u80fd\u4e09\u4e2a\u53c2\u6570 \u81f3\u4e8e\u600e\u4e48\u5b9e\u73b0\u53d8\u53c2\u51fd\u6570\uff0c\u4e0d\u662f\u672c\u6587\u91cd\u70b9\uff0c\u6211\u4eec\u5c31\u8df3\u8fc7\u4e86\u3002\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u901a\u8fc7\u641c\u7d22\u53d8\u53c2\u51fd\u6570 + va_start \u5173\u952e\u5b57\u5f97\u5230\u7b54\u6848\u3002 \u53d8\u53c2\u6a21\u677f\u57fa\u672c\u8bed\u6cd5 \u00b6 \u6240\u8c13\u7684\u53d8\u53c2\u6a21\u677f\uff0c\u5b9e\u73b0\u539f\u7406\u548c\u53d8\u53c2\u51fd\u6570\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u53d8\u53c2\u51fd\u6570\u662f\u8fd0\u884c\u65f6\u89e3\u6790\u6808\u6765\u8fbe\u5230\u53ef\u53d8\u53c2\u7684\u76ee\u7684\u3002 \u800c\u53ef\u53d8\u53c2\u6a21\u677f\u662f\u7f16\u8bd1\u65f6\u901a\u8fc7\u6a21\u677f\u5c55\u5f00\u8fbe\u5230\u76ee\u7684\u7684\uff0c\u6ca1\u6709\u8fd0\u884c\u65f6\u7684\u989d\u5916\u6027\u80fd\u635f\u5931\u3002 \u4f46\u4e24\u8005\u7684\u76f4\u89c2\u6548\u679c\u662f\u7c7b\u4f3c\u7684\uff0c\u90fd\u53ef\u4ee5\u5b9a\u4e49\u51fd\u6570\u6216\u8005\u7c7b\u65b9\u6cd5\uff0c\u63a5\u6536\u4efb\u610f\u4e2a\u6570\u7684\u53c2\u6570\u3002 \u53d8\u53c2\u6a21\u677f\u7684\u5b9e\u4f8b \u00b6 \u8ba9\u6211\u4eec\u5148\u4ece\u6700\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u770b\u770b\u53d8\u53c2\u6a21\u677f\u7684\u8bed\u6cd5\u3002 template < typename ... Args > void fun ( Args ... args ){ } int main ( int argc , char * argv []) { fun ( 1 , 3.5 , \"hello\" ); fun ( 1 , 2 ); fun ( 1 ); return 0 ; } \u4ee5\u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u53c2\u6a21\u677f\u3002\u6211\u4eec\u6765\u8c03\u7528\u5b83\u4f1a\u53d1\u73b0\uff0c\u65e0\u8bba\u662f\u4f20\u90123\u4e2a\u53c2\u6570\u30012\u4e2a\u53c2\u6570\u8fd8\u662f1\u4e2a\u53c2\u6570\uff0c\u90fd\u662f\u53ef\u4ee5\u7684\u3002\u751a\u81f3\u53c2\u6570\u7c7b\u578b\u4e0d\u4e00\u81f4\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u901a\u8fc7\u4e0a\u9762\u7684\u7b80\u5355\u4f8b\u5b50\uff0c\u6211\u4eec\u603b\u7ed3\u4e0b\u53d8\u53c2\u6a21\u677f\u7684\u57fa\u672c\u8bed\u6cd5\uff0c\u4f1a\u53d1\u73b0\u5173\u952e\u70b9\u662f\u4e24\u4e2a\uff1a \u4f7f\u7528 typename... \u4fee\u9970\u6a21\u677f\u53c2\u6570\uff0c\u5927\u5bb6\u5176\u5b9e\u53ef\u4ee5\u628a\u5b83\u7b80\u5355\u7406\u89e3\u6210 typename \u4e4b\u5916\u7684\u65b0\u5173\u952e\u5b57\uff0c\u4e13\u95e8\u7528\u4e8e\u4fee\u9970\u53d8\u53c2\u6a21\u677f\u7684\u6a21\u677f\u53c2\u6570 Args... args \uff0c\u8fd9\u5176\u5b9e\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u8fd9\u4e2a\u51fd\u6570\uff0c\u53c2\u6570\u4e2a\u6570\u662f\u53ef\u53d8\u7684 \u53ef\u53d8\u53c2\u6a21\u677f\u7684\u8bed\u6cd5\u8fd8\u662f\u5f88\u7b80\u5355\u7684\u3002\u4e0d\u8fc7\uff0c\u867d\u7136\u6211\u4eec\u7528\u53d8\u53c2\u6a21\u677f\u5b9e\u73b0\u4e86\u51fd\u6570\uff0c\u8c03\u7528\u65f6\u53ef\u4ee5\u4f20\u9012\u4efb\u610f\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\u5374\u5e76\u6ca1\u6709\u4f7f\u7528\u53c2\u6570\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5b9a\u4e49\u7684\u51fd\u6570\u4e00\u70b9\u7528\u90fd\u6ca1\u6709\u3002 \u6211\u4eec\u63a5\u7740\u8981\u770b\u53ef\u53d8\u53c2\u6a21\u677f\u51fd\u6570\u5185\u90e8\uff0c\u5982\u4f55\u4f7f\u7528\u53c2\u6570\u3002 \u6253\u5370\u4efb\u610f\u4e2a\u53c2\u6570 \u00b6 \u6211\u4eec\u5148\u770b\u4e00\u4e2a\u5b9e\u9645\u7684\u4f8b\u5b50\u3002\u5982\u4f55\u4f7f\u7528\u53d8\u53c2\u6a21\u677f\u201c\u9012\u5f52\u201d\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u6253\u5370\u4efb\u610f\u591a\u4e2a\u53c2\u6570\u7684 myprint \u3002 #include <iostream> void myprint (){ } template < typename T , typename ... Args > void myprint ( T firstArg , Args ... args ){ std :: cout << firstArg << std :: endl ; // \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 myprint ( args ...); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } int main ( int argc , char * argv []){ myprint ( 1 , 3.14 , \"hello\" ); return 0 ; } \u6211\u4eec\u6682\u65f6\u4e0d\u7528\u7ea0\u7ed3\u7ec6\u8282\uff0c\u53ea\u8981\u77e5\u9053\u5176\u4e2d\u7684\u5173\u952e\u70b9\u662f\uff1a Args... \u548c args... \u3002\u5b83\u4eec\u662f\u5f88\u91cd\u8981\u7684\u64cd\u4f5c\uff0c\u79f0\u4e3a \u89e3\u5305 \uff08pack expansion\uff09\u3002\u4e5f\u5c31\u662f\u6839\u636e\u8c03\u7528\u65f6\u7684\u60c5\u51b5\uff0c\u628a\u6253\u5305\u597d\u7684\u53c2\u6570\u5c55\u5f00\u3002 \u76f4\u63a5\u89e3\u91ca myprint \u7684\u5de5\u4f5c\u539f\u7406\u6bd4\u8f83\u590d\u6742\uff0c\u6211\u4eec\u5148\u901a\u8fc7 myprint \u7684\u6a21\u677f\u5c55\u5f00\u8fc7\u7a0b\u4e86\u89e3\u89e3\u5305\u64cd\u4f5c\u3002 myprint \u7684\u5c55\u5f00\u8fc7\u7a0b \u00b6 \u5f53 myprint \u7b2c\u4e00\u6b21\u88ab\u8c03\u7528\u65f6\uff08\u5373 myprint(1, 3.14, \"hello\"); \uff09\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570 1 \uff0c\u4f1a\u88ab\u63a8\u5bfc\u6210 int \u7c7b\u578b\uff0c 3.14 \u88ab\u63a8\u5bfc\u6210 double \u7c7b\u578b\uff0c \"Hello\" \u88ab\u63a8\u5bfc\u6210 const char* \u7c7b\u578b\uff0c myprint \u6a21\u677f\u88ab\u66ff\u6362\u6210\u4e86\u8fd9\u4e2a\u51fd\u6570\uff1a //\u7b2c\u4e00\u6b21\u8c03\u7528\uff1a myprint(1, 3.14, \"hello\"); void myprint ( int firstArg , double E1 , const char * E2 /*T firstArg, Args... args*/ ){ std :: cout << firstArg << std :: endl ; // firstArg=1 \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 //myprint(args...); //E1=3.14 E2=\"hello\" myprint ( E1 , E2 ); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } \u7c7b\u4f3c\u7684\uff0c\u4ee5\u4e0a myprint(E1,E2); \u4f1a\u88ab\u81ea\u52a8\u63a8\u5bfc\u7c7b\u578b\uff0c\u5e76\u5c55\u5f00\u4e3a\u5982\u4e0b\u51fd\u6570\uff1a //\u7b2c\u4e8c\u6b21\u8c03\u7528\uff1a myprint(3.14, \"hello\"); void myprint ( double firstArg , const char * E1 /*T firstArg, Args... args*/ ){ std :: cout << firstArg << std :: endl ; // firstArg=3.14 \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 //myprint(args...);E1=\"hello\" myprint ( E1 ); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } \u7ee7\u7eed\uff0c myprint(E1); \u4f1a\u88ab\u5c55\u5f00\u4e3a\uff1a //\u7b2c\u4e09\u6b21\u8c03\u7528\uff1a myprint(\"hello\"); void myprint ( const char * firstArg /*T firstArg, Args... args*/ ){ std :: cout << firstArg << std :: endl ; // firstArg=\"hello\" \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 //myprint(args...);E1=\u65e0\u53c2\u6570 myprint (); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e00\u6b21\u5c55\u5f00\uff0c\u5185\u90e8\u7684 myprint() \u5df2\u7ecf\u6ca1\u6709\u5b9e\u53c2\u4e86\uff0c\u8fd9\u4e5f\u662f\u5728\u6700\u521d\u7684\u5b9e\u73b0 myprit \u65f6\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u6ca1\u6709\u53c2\u6570\u7684 myprint \u7684\u539f\u56e0\uff1a void myprint (){ } sizeof... \u8fd0\u7b97\u7b26 \u00b6 \u53d8\u53c2\u6a21\u677f\u7684\u91cd\u70b9\u548c\u539f\u7406\uff0c\u57fa\u672c\u4ecb\u7ecd\u5b8c\u4e86\u3002\u8fd8\u6709\u4e00\u4e2a\u76f8\u5173\u7684\u8fd0\u7b97\u7b26\u9700\u8981\u4e86\u89e3\uff1a sizeof... \u3002 \u5b83\u89e3\u51b3\u7684\u9700\u6c42\u662f\uff1a\u5e2e\u52a9\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u77e5\u6653\uff0c\u51fd\u6570\u8c03\u7528\u65f6\u5177\u4f53\u6709\u51e0\u4e2a\u53c2\u6570\u3002 template < typename ... Args > void fun ( Args ... args ){ std :: cout << \"sizeof...(Args): \" << sizeof ...( Args ) << std :: endl ; std :: cout << \"sizeof...(args): \" << sizeof ...( args ) << std :: endl ; std :: cout << \"======================\" << std :: endl ; } int main ( int argc , char * argv []) { fun ( 1 , 3.5 , \"hello\" ); fun ( 1 , 2 ); fun ( 1 ); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a sizeof...(Args): 3 sizeof...(args): 3 ====================== sizeof...(Args): 2 sizeof...(args): 2 ====================== sizeof...(Args): 1 sizeof...(args): 1 ====================== \u603b\u7ed3 \u00b6 \u53d8\u53c2\u6a21\u677f\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u5176\u5b9e\u72ec\u7acb\u4f7f\u7528\u53d8\u53c2\u6a21\u677f\u7684\u573a\u666f\u5f88\u5c11\u3002\u4f46\u662f\u7ed3\u5408\u6211\u4eec\u4e4b\u524d\u4ecb\u7ecd\u7684\u5b8c\u7f8e\u8f6c\u53d1\uff0c\u5b83\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u201c\u521b\u9020\u7c7b\u201d\u7684\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u3002\u8fd9\u4e2a\u5728 OneFlow \u7684\u4ee3\u7801\u4ed3\u5e93\u4e2d\uff0c\u53ef\u4ee5\u627e\u5230\uff0c\u6bd4\u5982 \u5355\u4f8b\u8bbe\u8ba1\u6a21\u5f0f \u3001 \u5de5\u5382\u8bbe\u8ba1\u6a21\u5f0f \u3002 \u6269\u5c55\u9605\u8bfb \u00b6 parameter pack","title":"\u53ef\u53d8\u53c2\u6a21\u677f"},{"location":"learn_cpp/03_varadic_template.html#_1","text":"","title":"\u53ef\u53d8\u53c2\u6a21\u677f"},{"location":"learn_cpp/03_varadic_template.html#_2","text":"\u5728\u4ecb\u7ecd\u53d8\u53c2\u6a21\u677f\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8bb2\u4e0b\uff08\u53ef\uff09\u53d8\u53c2\u51fd\u6570\uff0c\u4ed6\u4eec\u4e24\u8005\u867d\u7136\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb\uff0c \u4f46\u662f\u6709\u7c7b\u4f3c\u7684\u76f4\u89c2\u8ba4\u8bc6\u3002 \u4ec0\u4e48\u662f\u53d8\u53c2\u51fd\u6570\u5462\uff0c\u5b66\u8fc7 C \u8bed\u8a00\u7684\u4eba\uff0c\u4e0d\u4e00\u5b9a\u542c\u8bf4\u8fc7\u8fd9\u4e2a\u540d\u5b57\uff0c\u4f46\u4e00\u5b9a\u5df2\u7ecf\u7528\u8fc7\u53d8\u53c2\u51fd\u6570\u3002\u56e0\u4e3a printf \u5c31\u662f\u53d8\u53c2\u51fd\u6570\u3002 \u6240\u8c13\u53d8\u53c2\u51fd\u6570\uff0c\u5c31\u662f\u8c03\u7528\u65f6\u4f20\u9012\u7684\u53c2\u6570\u4e2a\u6570\u662f\u53ef\u4ee5\u53d8\u5316\u7684\u3002\u6bd4\u5982 printf \uff1a printf ( \"%d, %d\" , 10 , 20 ); printf ( \"%d, %d, %d\" , 10 , 20 , 30 ); \u800c\u6211\u4eec\u5b9a\u4e49\u7684\u666e\u901a\u51fd\u6570\u5374\u4e0d\u80fd\u8fd9\u6837\uff0c\u53c2\u6570\u4e2a\u6570\u662f\u786e\u5b9a\u7684\uff1a int foo ( int , int ); // \u53ea\u80fd2\u4e2a\u53c2\u6570 int foo ( int , int , int ); // \u53ea\u80fd\u4e09\u4e2a\u53c2\u6570 \u81f3\u4e8e\u600e\u4e48\u5b9e\u73b0\u53d8\u53c2\u51fd\u6570\uff0c\u4e0d\u662f\u672c\u6587\u91cd\u70b9\uff0c\u6211\u4eec\u5c31\u8df3\u8fc7\u4e86\u3002\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u901a\u8fc7\u641c\u7d22\u53d8\u53c2\u51fd\u6570 + va_start \u5173\u952e\u5b57\u5f97\u5230\u7b54\u6848\u3002","title":"\u4ec0\u4e48\u662f\u53ef\u53d8\u53c2"},{"location":"learn_cpp/03_varadic_template.html#_3","text":"\u6240\u8c13\u7684\u53d8\u53c2\u6a21\u677f\uff0c\u5b9e\u73b0\u539f\u7406\u548c\u53d8\u53c2\u51fd\u6570\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u53d8\u53c2\u51fd\u6570\u662f\u8fd0\u884c\u65f6\u89e3\u6790\u6808\u6765\u8fbe\u5230\u53ef\u53d8\u53c2\u7684\u76ee\u7684\u3002 \u800c\u53ef\u53d8\u53c2\u6a21\u677f\u662f\u7f16\u8bd1\u65f6\u901a\u8fc7\u6a21\u677f\u5c55\u5f00\u8fbe\u5230\u76ee\u7684\u7684\uff0c\u6ca1\u6709\u8fd0\u884c\u65f6\u7684\u989d\u5916\u6027\u80fd\u635f\u5931\u3002 \u4f46\u4e24\u8005\u7684\u76f4\u89c2\u6548\u679c\u662f\u7c7b\u4f3c\u7684\uff0c\u90fd\u53ef\u4ee5\u5b9a\u4e49\u51fd\u6570\u6216\u8005\u7c7b\u65b9\u6cd5\uff0c\u63a5\u6536\u4efb\u610f\u4e2a\u6570\u7684\u53c2\u6570\u3002","title":"\u53d8\u53c2\u6a21\u677f\u57fa\u672c\u8bed\u6cd5"},{"location":"learn_cpp/03_varadic_template.html#_4","text":"\u8ba9\u6211\u4eec\u5148\u4ece\u6700\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u770b\u770b\u53d8\u53c2\u6a21\u677f\u7684\u8bed\u6cd5\u3002 template < typename ... Args > void fun ( Args ... args ){ } int main ( int argc , char * argv []) { fun ( 1 , 3.5 , \"hello\" ); fun ( 1 , 2 ); fun ( 1 ); return 0 ; } \u4ee5\u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u53c2\u6a21\u677f\u3002\u6211\u4eec\u6765\u8c03\u7528\u5b83\u4f1a\u53d1\u73b0\uff0c\u65e0\u8bba\u662f\u4f20\u90123\u4e2a\u53c2\u6570\u30012\u4e2a\u53c2\u6570\u8fd8\u662f1\u4e2a\u53c2\u6570\uff0c\u90fd\u662f\u53ef\u4ee5\u7684\u3002\u751a\u81f3\u53c2\u6570\u7c7b\u578b\u4e0d\u4e00\u81f4\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u901a\u8fc7\u4e0a\u9762\u7684\u7b80\u5355\u4f8b\u5b50\uff0c\u6211\u4eec\u603b\u7ed3\u4e0b\u53d8\u53c2\u6a21\u677f\u7684\u57fa\u672c\u8bed\u6cd5\uff0c\u4f1a\u53d1\u73b0\u5173\u952e\u70b9\u662f\u4e24\u4e2a\uff1a \u4f7f\u7528 typename... \u4fee\u9970\u6a21\u677f\u53c2\u6570\uff0c\u5927\u5bb6\u5176\u5b9e\u53ef\u4ee5\u628a\u5b83\u7b80\u5355\u7406\u89e3\u6210 typename \u4e4b\u5916\u7684\u65b0\u5173\u952e\u5b57\uff0c\u4e13\u95e8\u7528\u4e8e\u4fee\u9970\u53d8\u53c2\u6a21\u677f\u7684\u6a21\u677f\u53c2\u6570 Args... args \uff0c\u8fd9\u5176\u5b9e\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u8fd9\u4e2a\u51fd\u6570\uff0c\u53c2\u6570\u4e2a\u6570\u662f\u53ef\u53d8\u7684 \u53ef\u53d8\u53c2\u6a21\u677f\u7684\u8bed\u6cd5\u8fd8\u662f\u5f88\u7b80\u5355\u7684\u3002\u4e0d\u8fc7\uff0c\u867d\u7136\u6211\u4eec\u7528\u53d8\u53c2\u6a21\u677f\u5b9e\u73b0\u4e86\u51fd\u6570\uff0c\u8c03\u7528\u65f6\u53ef\u4ee5\u4f20\u9012\u4efb\u610f\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\u5374\u5e76\u6ca1\u6709\u4f7f\u7528\u53c2\u6570\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5b9a\u4e49\u7684\u51fd\u6570\u4e00\u70b9\u7528\u90fd\u6ca1\u6709\u3002 \u6211\u4eec\u63a5\u7740\u8981\u770b\u53ef\u53d8\u53c2\u6a21\u677f\u51fd\u6570\u5185\u90e8\uff0c\u5982\u4f55\u4f7f\u7528\u53c2\u6570\u3002","title":"\u53d8\u53c2\u6a21\u677f\u7684\u5b9e\u4f8b"},{"location":"learn_cpp/03_varadic_template.html#_5","text":"\u6211\u4eec\u5148\u770b\u4e00\u4e2a\u5b9e\u9645\u7684\u4f8b\u5b50\u3002\u5982\u4f55\u4f7f\u7528\u53d8\u53c2\u6a21\u677f\u201c\u9012\u5f52\u201d\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u6253\u5370\u4efb\u610f\u591a\u4e2a\u53c2\u6570\u7684 myprint \u3002 #include <iostream> void myprint (){ } template < typename T , typename ... Args > void myprint ( T firstArg , Args ... args ){ std :: cout << firstArg << std :: endl ; // \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 myprint ( args ...); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } int main ( int argc , char * argv []){ myprint ( 1 , 3.14 , \"hello\" ); return 0 ; } \u6211\u4eec\u6682\u65f6\u4e0d\u7528\u7ea0\u7ed3\u7ec6\u8282\uff0c\u53ea\u8981\u77e5\u9053\u5176\u4e2d\u7684\u5173\u952e\u70b9\u662f\uff1a Args... \u548c args... \u3002\u5b83\u4eec\u662f\u5f88\u91cd\u8981\u7684\u64cd\u4f5c\uff0c\u79f0\u4e3a \u89e3\u5305 \uff08pack expansion\uff09\u3002\u4e5f\u5c31\u662f\u6839\u636e\u8c03\u7528\u65f6\u7684\u60c5\u51b5\uff0c\u628a\u6253\u5305\u597d\u7684\u53c2\u6570\u5c55\u5f00\u3002 \u76f4\u63a5\u89e3\u91ca myprint \u7684\u5de5\u4f5c\u539f\u7406\u6bd4\u8f83\u590d\u6742\uff0c\u6211\u4eec\u5148\u901a\u8fc7 myprint \u7684\u6a21\u677f\u5c55\u5f00\u8fc7\u7a0b\u4e86\u89e3\u89e3\u5305\u64cd\u4f5c\u3002","title":"\u6253\u5370\u4efb\u610f\u4e2a\u53c2\u6570"},{"location":"learn_cpp/03_varadic_template.html#myprint","text":"\u5f53 myprint \u7b2c\u4e00\u6b21\u88ab\u8c03\u7528\u65f6\uff08\u5373 myprint(1, 3.14, \"hello\"); \uff09\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570 1 \uff0c\u4f1a\u88ab\u63a8\u5bfc\u6210 int \u7c7b\u578b\uff0c 3.14 \u88ab\u63a8\u5bfc\u6210 double \u7c7b\u578b\uff0c \"Hello\" \u88ab\u63a8\u5bfc\u6210 const char* \u7c7b\u578b\uff0c myprint \u6a21\u677f\u88ab\u66ff\u6362\u6210\u4e86\u8fd9\u4e2a\u51fd\u6570\uff1a //\u7b2c\u4e00\u6b21\u8c03\u7528\uff1a myprint(1, 3.14, \"hello\"); void myprint ( int firstArg , double E1 , const char * E2 /*T firstArg, Args... args*/ ){ std :: cout << firstArg << std :: endl ; // firstArg=1 \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 //myprint(args...); //E1=3.14 E2=\"hello\" myprint ( E1 , E2 ); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } \u7c7b\u4f3c\u7684\uff0c\u4ee5\u4e0a myprint(E1,E2); \u4f1a\u88ab\u81ea\u52a8\u63a8\u5bfc\u7c7b\u578b\uff0c\u5e76\u5c55\u5f00\u4e3a\u5982\u4e0b\u51fd\u6570\uff1a //\u7b2c\u4e8c\u6b21\u8c03\u7528\uff1a myprint(3.14, \"hello\"); void myprint ( double firstArg , const char * E1 /*T firstArg, Args... args*/ ){ std :: cout << firstArg << std :: endl ; // firstArg=3.14 \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 //myprint(args...);E1=\"hello\" myprint ( E1 ); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } \u7ee7\u7eed\uff0c myprint(E1); \u4f1a\u88ab\u5c55\u5f00\u4e3a\uff1a //\u7b2c\u4e09\u6b21\u8c03\u7528\uff1a myprint(\"hello\"); void myprint ( const char * firstArg /*T firstArg, Args... args*/ ){ std :: cout << firstArg << std :: endl ; // firstArg=\"hello\" \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 //myprint(args...);E1=\u65e0\u53c2\u6570 myprint (); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e00\u6b21\u5c55\u5f00\uff0c\u5185\u90e8\u7684 myprint() \u5df2\u7ecf\u6ca1\u6709\u5b9e\u53c2\u4e86\uff0c\u8fd9\u4e5f\u662f\u5728\u6700\u521d\u7684\u5b9e\u73b0 myprit \u65f6\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u6ca1\u6709\u53c2\u6570\u7684 myprint \u7684\u539f\u56e0\uff1a void myprint (){ }","title":"myprint \u7684\u5c55\u5f00\u8fc7\u7a0b"},{"location":"learn_cpp/03_varadic_template.html#sizeof","text":"\u53d8\u53c2\u6a21\u677f\u7684\u91cd\u70b9\u548c\u539f\u7406\uff0c\u57fa\u672c\u4ecb\u7ecd\u5b8c\u4e86\u3002\u8fd8\u6709\u4e00\u4e2a\u76f8\u5173\u7684\u8fd0\u7b97\u7b26\u9700\u8981\u4e86\u89e3\uff1a sizeof... \u3002 \u5b83\u89e3\u51b3\u7684\u9700\u6c42\u662f\uff1a\u5e2e\u52a9\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u77e5\u6653\uff0c\u51fd\u6570\u8c03\u7528\u65f6\u5177\u4f53\u6709\u51e0\u4e2a\u53c2\u6570\u3002 template < typename ... Args > void fun ( Args ... args ){ std :: cout << \"sizeof...(Args): \" << sizeof ...( Args ) << std :: endl ; std :: cout << \"sizeof...(args): \" << sizeof ...( args ) << std :: endl ; std :: cout << \"======================\" << std :: endl ; } int main ( int argc , char * argv []) { fun ( 1 , 3.5 , \"hello\" ); fun ( 1 , 2 ); fun ( 1 ); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a sizeof...(Args): 3 sizeof...(args): 3 ====================== sizeof...(Args): 2 sizeof...(args): 2 ====================== sizeof...(Args): 1 sizeof...(args): 1 ======================","title":"sizeof... \u8fd0\u7b97\u7b26"},{"location":"learn_cpp/03_varadic_template.html#_6","text":"\u53d8\u53c2\u6a21\u677f\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u5176\u5b9e\u72ec\u7acb\u4f7f\u7528\u53d8\u53c2\u6a21\u677f\u7684\u573a\u666f\u5f88\u5c11\u3002\u4f46\u662f\u7ed3\u5408\u6211\u4eec\u4e4b\u524d\u4ecb\u7ecd\u7684\u5b8c\u7f8e\u8f6c\u53d1\uff0c\u5b83\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u201c\u521b\u9020\u7c7b\u201d\u7684\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u3002\u8fd9\u4e2a\u5728 OneFlow \u7684\u4ee3\u7801\u4ed3\u5e93\u4e2d\uff0c\u53ef\u4ee5\u627e\u5230\uff0c\u6bd4\u5982 \u5355\u4f8b\u8bbe\u8ba1\u6a21\u5f0f \u3001 \u5de5\u5382\u8bbe\u8ba1\u6a21\u5f0f \u3002","title":"\u603b\u7ed3"},{"location":"learn_cpp/03_varadic_template.html#_7","text":"parameter pack","title":"\u6269\u5c55\u9605\u8bfb"},{"location":"learn_cpp/04_singleton.html","text":"\u5355\u4f8b\u6a21\u5f0f\uff1a\u4ece naive \u5230\u5de5\u4e1a\u7ea7 \u00b6 \u4eca\u5929\u53ef\u4ee5\u6765\u8c08\u8c08\u5355\u4f8b\u6a21\u5f0f\u3002\u5927\u5bb6\u53ef\u80fd\u6216\u591a\u6216\u5c11\u90fd\u542c\u8bf4\u8fc7\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5c0f\u7cd6\u8bfb\u4e66\u7684\u65f6\u5019\uff0c\u5c31\u542c\u8bf4\u8981\u5148\u5b66\u7f16\u7a0b\u8bed\u8a00\u3001\u518d\u5b66\u6570\u636e\u7ed3\u6784\u3001\u7136\u540e\u518d\u5b66\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u6700\u7ec8\u8d70\u5411\u67b6\u6784\u5e08\u3002\u8bbe\u8ba1\u6a21\u5f0f\u5bb9\u6613\u8ba9\u4eba\u611f\u89c9\u975e\u5e38\u7684\u9ad8\u7ea7\u548c\u795e\u79d8\u3002 \u5176\u5b9e\u5c0f\u5510\u4e00\u76f4\u628a\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5f53\u4f5c\u5199\u4ee3\u7801\u7684\u201c\u5957\u8def\u201d\u3002\u7528\u597d\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u53ef\u4ee5\u907f\u514d\u6389\u5f88\u591a\u9879\u76ee\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u7684\u5751\u3002\u4f46\u662f\u53e6\u5916\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6ca1\u6709\u8e29\u8fc7\u5751\uff0c\u53c8\u5f88\u96be\u7406\u89e3\u8bbe\u8ba1\u6a21\u5f0f\u7684\u7cbe\u5999\u3002\u53cd\u800c\u5bb9\u6613\u88ab\u5404\u7c7b\u8bbe\u8ba1\u6a21\u5f0f\u7684\u591a\u5c42\u62bd\u8c61\u7ed9\u5f04\u6655\u3002\u6240\u4ee5\u6700\u597d\u7684\u65b9\u5f0f\uff0c\u5c31\u662f\u6839\u636e\u771f\u5b9e\u7684\u9879\u76ee\u5b66\u8bbe\u8ba1\u6a21\u5f0f\u3002\u4eca\u5929\u6211\u4eec\u5c31\u4ece\u5927\u578bC++\u5de5\u7a0b\u3001\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u4e2d\uff0c\u5b66\u4e60\u5355\u4f8b\u6a21\u5f0f\u3002 \u4ec0\u4e48\u662f\u5355\u4f8b\u6a21\u5f0f \u00b6 \u5728\u5b9e\u9645\u573a\u666f\u4e2d\uff0c\u7ecf\u5e38\u6709 \u201c\u67d0\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61\u201d \u7684\u9700\u6c42\u3002\u5982\u5168\u5c4f\u6e38\u620f\u8fd0\u884c\u65f6\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u7a97\u53e3\u3001\u7cfb\u7edf\u65e5\u5fd7\u7531\u4e00\u4e2a\u65e5\u5fd7\u7ba1\u7406\u5668\u7edf\u4e00\u8bb0\u5f55\uff0c\u518d\u6bd4\u5982\uff0c\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u4e2d\u7684\u5168\u5c40\u73af\u5883\u4fe1\u606f\u3001\u7ebf\u7a0b\u6c60\u7b49\u90fd\u8bbe\u8ba1\u4e3a\u5355\u4f8b\u3002 \u300a\u8bbe\u8ba1\u6a21\u5f0f\u300b\u4e00\u4e66\u4e2d\uff0c\u7ed9\u51fa\u4e86\u5355\u4f8b\u6a21\u5f0f\u7684\u7b80\u5355\u5b9e\u73b0\uff1a // singleton.h class CSingleton { public : static CSingleton * Instance (){ if ( _instance == nullptr ){ _instance = new CSingleton ; } return _instance ; } //\u8be5\u7c7b\u7684\u5176\u5b83\u63a5\u53e3 ... protected : CSingleton (){} private : static CSingleton * _instance ; }; // singleton.cpp CSingleton * CSingleton :: _instance ; \u5b83\u7684\u5b9e\u73b0\u8981\u70b9\u662f\uff1a \u5c06\u6784\u9020\u51fd\u6570\u8bbe\u7f6e\u4e3a\u975e public \u7684\u6743\u9650 \u4f7f\u7528\u4e00\u4e2a\u7c7b\u9759\u6001\u6210\u5458\u4fdd\u5b58\u552f\u4e00\u7684\u5b9e\u4f8b \u5b9e\u73b0\u4e00\u4e2a public \u7684\u9759\u6001\u65b9\u6cd5\uff0c\u7528\u4e8e\u83b7\u53d6\u552f\u4e00\u7684\u5bf9\u8c61\u5b9e\u4f8b \u4f46\u662f\uff0c\u8fd9\u79cd\u793a\u4f8b\u4ee3\u7801\uff0c\u4ecd\u7136\u6709\u4e00\u4e9b\u7f3a\u9677\u3002\u6bd4\u5982\u62f7\u8d1d\u6784\u9020\u3001\u79fb\u52a8\u6784\u9020\u8fd8\u672adelete\uff0c\u6240\u4ee5\u7528\u6237\u53ef\u80fd\u6709\u5176\u5b83\u65b9\u5f0f\u6784\u9020\u5bf9\u8c61\u5b9e\u4f8b\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\u81ea\u5df1\u6ce8\u610f\u548c\u4fee\u6539\u3002 \u66f4\u91cd\u8981\u7684\u662f\uff0c\u5b83\u8fd8\u5176\u5b83\u7f3a\u9677\uff0c\u6ee1\u8db3\u4e0d\u4e86\u5de5\u4e1a\u7ea7\u7684\u9700\u6c42\uff1a \u4e0d\u540c\u7684\u7c7b\u60f3\u8981\u53d8\u6210\u5355\u4f8b\uff0c\u90fd\u9700\u8981\u91cd\u590d\u6dfb\u52a0 Instance \u65b9\u6cd5\u53ca\u9759\u6001\u6210\u5458\uff0c\u6bd4\u8f83\u5197\u4f59\u3002 \u4e0d\u80fd\u5904\u7406\u4e00\u4e2a\u7c7b\u7684\u6784\u9020\u5b58\u5728\u91cd\u8f7d\u7684\u60c5\u51b5\u3002\u66f4\u6ca1\u6709\u529e\u6cd5\u7edf\u4e00\u4f18\u96c5\u5730\u89e3\u51b3\u4e0d\u540c\u7c7b\u7684\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u4e2a\u6570\u3001\u53c2\u6570\u7c7b\u578b\u53ef\u80fd\u4e0d\u540c\u7684\u95ee\u9898\u3002\u8fd9\u4e2a\u7248\u672c\u76f4\u63a5\u56de\u907f\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e3e\u4f8b\u7528\u7684\u662f\u65e0\u53c2\u6784\u9020\u3002 \u65e0\u6cd5\u7cbe\u786e\u63a7\u5236\u5355\u4f8b\u5bf9\u8c61\u7684\u987a\u5e8f\u4f9d\u8d56\u5173\u7cfb\u3002\u6bd4\u5982\u5efa\u5efa\u5b66\u6821\uff0c\u8981\u5148\u6709\u6821\u957f\u3002\u8fd9\u5c31\u5fc5\u9700\u4fdd\u8bc1\u6821\u957f\u5728\u5b66\u6821\u6784\u9020\u524d\u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\u3002 \u4f46\u662f\u8fd9\u4e2a\u6734\u7d20\u7248\u672c\uff0c\u628a\u521b\u5efa\u5bf9\u8c61\u548c\u83b7\u53d6\u5bf9\u8c61\u7684\u903b\u8f91\u653e\u5728\u4e86\u4e00\u8d77\uff0c\u65e0\u6cd5\u7cbe\u786e\u63a7\u5236\u5355\u4f8b\u7684\u751f\u547d\u5468\u671f\u3002 \u6211\u4eec\u770b\u770b OneFlow \u4e2d\u662f\u600e\u4e48\u514b\u670d\u4ee5\u4e0a\u7f3a\u9677\u7684\u3002 OneFlow \u4e2d\u7684\u5de5\u4e1a\u7ea7\u5355\u4f8b\u6a21\u5f0f \u00b6 OneFlow \u7684\u5355\u4f8b\u6a21\u5f0f\u4ee3\u7801\u5728 global.h \u4e2d\u3002\u5b83\u7684\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff08\u6211\u7b80\u5316\u4e86\u548c\u5f02\u5e38\u5904\u7406\u3001\u9519\u8bef\u68c0\u67e5\u7b49\u4ee3\u7801\uff09\uff1a template < typename T > class Global final { public : static T * Get () { return * GetPPtr (); } template < typename ... Args > static void New ( Args && ... args ) { CHECK ( Get () == nullptr ); //\u4e0d\u4e3a nullptr \u5c06\u629b\u5f02\u5e38 * GetPPtr () = new T ( std :: forward < Args > ( args )...); } static void Delete () { if ( Get () != nullptr ) { delete Get (); * GetPPtr () = nullptr ; } } private : static T ** GetPPtr () { static T * ptr = nullptr ; return & ptr ; } }; \u6211\u4eec\u770b\u5230\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e09\u4e2a\u91cd\u8981\u7684\u516c\u5f00\u65b9\u6cd5\uff1a New \u3001 Get \u3001 Delete \u3002\u5176\u4e2d New \u662f\u7528\u6765\u5b9e\u4f8b\u5316\u5355\u4f8b\u3001 Delete \u7528\u6765\u9500\u6bc1\u5355\u4f8b\u3001 Get \u7528\u6765\u83b7\u53d6\u5168\u5c40\u552f\u4e00\u7684\u5355\u4f8b\u5bf9\u8c61\u3002 \u6211\u4eec\u770b\u5230\uff0c\u4e0e\u4e4b\u524d\u6734\u7d20\u7248\u672c\u7684\u5355\u4f8b\u6a21\u5f0f\u76f8\u6bd4\uff0c Global \u4e13\u95e8\u8bbe\u8ba1\u4e86 New \u63a5\u53e3\u548c Delete \u63a5\u53e3\u3002\u5b83\u7684\u597d\u5904\u5728\u4e8e\uff0c\u4e0d\u518d\u628a\u5355\u4f8b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u4ea4\u7ed9\u8fd0\u884c\u65f6\u548c\u7f16\u8bd1\u5668\u3002\u800c\u662f\u53ef\u4ee5\u975e\u5e38\u7cbe\u786e\u5730\u63a7\u5236\u5355\u4f8b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u3002 \u6bd4\u5982\u8fd9\u91cc\u7684\u4ee3\u7801\uff0c\u8fd9\u4e2a\u7ebf\u7a0b\u6c60\u5355\u4f8b\uff0c\u5c31\u4f9d\u8d56\u4e86 ResourceDesc \u5355\u4f8b\u3002\u56e0\u4e3a\u53ef\u4ee5\u7cbe\u786e\u63a7\u5236\u751f\u547d\u5468\u671f\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u4fdd\u7ebf\u7a0b\u6c60\u5b9e\u4f8b\u5316\u65f6\uff0c ResourceDesc \u5df2\u7ecf\u5b58\u5728\u4e86\u3002 Global < ThreadPool >:: New ( Global < ResourceDesc , ForSession >:: Get () -> ComputeThreadPoolSize ()); New \u63a5\u53e3\u5b9e\u73b0 \u00b6 \u6211\u4eec\u770b\u770b New \u63a5\u53e3\u7684\u5b9e\u73b0\u3002\u5df2\u7ecf\u638c\u63e1\u4e86\u5b8c\u7f8e\u8f6c\u53d1\u548c\u53d8\u53c2\u6a21\u677f\u7684\u540c\u5b66\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u770b\u61c2\uff0c\u8fd9\u91cc\u5c31\u662f\u505a\u4e86\u4e00\u4e2a\u5b8c\u7f8e\u8f6c\u53d1\uff0c \u5e76\u4e14\u652f\u6301\u4efb\u610f\u4e2a\u6570\u3001\u4efb\u610f\u7c7b\u578b\u53c2\u6570\u7684\u8f6c\u53d1\u3002\u8fd9\u4f7f\u5f97 OneFlow \u7684\u5355\u4f8b\u975e\u5e38\u7075\u6d3b\uff0c\u53ef\u4ee5\u7528 New \u63a5\u53e3\u7edf\u4e00\u5730\u521b\u5efa\u5404\u79cd\u5404\u6837\u7684\u7c7b\u3002 template < typename ... Args > static void New ( Args && ... args ) { CHECK ( Get () == nullptr ); //\u4e0d\u4e3a nullptr \u5c06\u629b\u5f02\u5e38 * GetPPtr () = new T ( std :: forward < Args > ( args )...); } \u4e0d\u8fc7\u521b\u5efa\u597d\u7684\u5bf9\u8c61\u653e\u54ea\u53bb\u4e86\u5462\uff1f\u8fd9\u548c\u65b9\u6cd5 GetPPtr \u6709\u5173\u7cfb\u3002\u8bfb\u61c2 GetPPtr \u7684\u5b9e\u73b0\uff0c\u7275\u6d89\u5230\u4e8c\u7ea7\u6307\u9488\u7684\u4f7f\u7528\u6280\u5de7\u3002 static T ** GetPPtr () { static T * ptr = nullptr ; return & ptr ; } \u719f\u6089\u547d\u540d\u89c4\u8303\u7684\u540c\u5b66\u77e5\u9053\uff0c\u5176\u5b9e GetPPtr \u7684\u540d\u5b57\u5c31\u6697\u793a\u4e86\u5b83\u548c\u4e8c\u7ea7\u6307\u9488\u6709\u5173\u3002\u6211\u4eec\u770b GetPPtr \u4e2d\uff0c\u51c6\u5907\u4e86\u4e00\u4e2a\u9759\u6001\u53d8\u91cf\uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u9488\u3002\u4f46\u662f\u8fd9\u4e2a\u51fd\u6570\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u9759\u6001\u53d8\u91cf\u3002\u800c\u662f\u8fd4\u56de\u8fd9\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u3002\u56e0\u6b64\u8fd9\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u662f \u4e8c\u7ea7\u6307\u9488 \u3002 \u800c\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u8fc7\u7a0b\uff0c\u5c31\u9700\u8981\u5148\u5b9a\u4f4d\u5230\u8fd9\u4e2a\u9759\u6001\u53d8\u91cf\u3002\u7136\u540e\u628a\u521b\u5efa\u7684\u5bf9\u8c61\u5730\u5740\u7ed9\u653e\u8fdb\u53bb\u3002 * GetPPtr () = new T ( std :: forward < Args > ( args )...); \u83b7\u53d6\u5355\u4f8b\u65f6\u4e5f\u7c7b\u4f3c\uff0c\u662f\u5148\u901a\u8fc7 GetPPtr \u5b9a\u4f4d\u5230\u4e86\u90a3\u4e2a\u9759\u6001\u53d8\u91cf\u3002\u7136\u540e\u901a\u8fc7\u89e3\u5f15\u7528\uff0c\u5f97\u5230\u9759\u6001\u53d8\u91cf\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u5355\u4f8b\u5bf9\u8c61\u7684\u5730\u5740\u3002 static T * Get () { return * GetPPtr (); } \u5355\u4f8b\u7684\u540c\u6b65\u95ee\u9898 \u00b6 \u5728\u4e0d\u5c11\u5355\u4f8b\u6a21\u5f0f\u7684\u793a\u8303\u4e2d\uff0c\u90fd\u559c\u6b22\u5728\u5355\u4f8b\u8bbe\u8ba1\u4e2d\uff0c \u7edf\u4e00\u5904\u7406\u591a\u7ebf\u7a0b\u540c\u6b65\u95ee\u9898 \u3002\u5176\u5b9e\u8fd9\u5f88\u5bb9\u6613\u5e26\u6765\u6027\u80fd\u7684\u635f\u5931\u3002\u5b9e\u9645\u4e0a\uff0c\u540c\u6b65\u95ee\u9898\u548c\u5355\u4f8b\u6a21\u5f0f\u662f2\u4e2a\u72ec\u7acb\u7684\u95ee\u9898\uff0c\u5c0f\u7cd6\u8ba4\u4e3a\u6700\u597d\u4e0d\u8981\u5c06\u4ed6\u4eec\u6df7\u4e3a\u4e00\u8c08\u3002\u540c\u6b65\u95ee\u9898\u5e94\u8be5\u662f\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5bf9\u5f85\u7684\u3002 \u4ee5 OneFlow \u4e3a\u4f8b\uff0c\u6240\u6709 Global \u5355\u4f8b\u5bf9\u8c61\u7684\u521b\u5efa\u548c\u9500\u6bc1\u90fd\u5728\u4e3b\u7ebf\u7a0b\u91cc\uff0c\u5e76\u4e0d\u5b58\u5728\u5e76\u53d1\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u7279\u522b\u7684\u540c\u6b65\u64cd\u4f5c\u3002\u5728 OneFlow \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c Global \u5355\u4f8b\u7c7b\u4e2d\u7684\u67d0\u4e00\u4e2a\u6210\u5458\u5b58\u5728\u5e76\u53d1\u95ee\u9898\uff0c\u90a3\u5c31\u5355\u72ec\u5bf9\u90a3\u4e2a\u6210\u5458\u52a0\u9501\u89e3\u51b3\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u901a\u5e38\u7684\u7f16\u7a0b\u5b9e\u8df5\u4e2d\uff0c\u9501\u7684\u7c92\u5ea6\u8981\u5c3d\u53ef\u80fd\u5c0f\u3002 \u603b\u7ed3 \u00b6 \u603b\u7ed3\u8d77\u6765\uff0c OneFlow \u8fd9\u79cd\u5de5\u4e1a\u7ea7\u4ee3\u7801\u91cc\u7684\u5355\u4f8b\u6a21\u5f0f\u6709\u4ee5\u4e0b\u4f18\u52bf\uff1a \u4efb\u610f\u4e00\u4e2a\u7c7b\u90fd\u53ef\u4ee5\u901a\u8fc7 Global \u6a21\u677f\u6210\u4e3a\u5355\u4f8b \u53ef\u4ee5\u7528\u7edf\u4e00\u7684 New \u63a5\u53e3\u521b\u5efa\u5404\u79cd\u7c7b\u5355\u4f8b\u3001\u5e76\u652f\u6301\u6784\u9020\u91cd\u8f7d \u53ef\u4ee5\u7cbe\u786e\u5730\u63a7\u5236\u5355\u4f8b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u548c\u4f9d\u8d56\u5173\u7cfb \u628a\u7ec6\u7c92\u5ea6\u5730\u89e3\u51b3\u540c\u6b65\u95ee\u9898\u7684\u6743\u529b\u4ea4\u7ed9\u4e86\u5f00\u53d1\u8005","title":"\u5355\u4f8b\u6a21\u5f0f"},{"location":"learn_cpp/04_singleton.html#naive","text":"\u4eca\u5929\u53ef\u4ee5\u6765\u8c08\u8c08\u5355\u4f8b\u6a21\u5f0f\u3002\u5927\u5bb6\u53ef\u80fd\u6216\u591a\u6216\u5c11\u90fd\u542c\u8bf4\u8fc7\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5c0f\u7cd6\u8bfb\u4e66\u7684\u65f6\u5019\uff0c\u5c31\u542c\u8bf4\u8981\u5148\u5b66\u7f16\u7a0b\u8bed\u8a00\u3001\u518d\u5b66\u6570\u636e\u7ed3\u6784\u3001\u7136\u540e\u518d\u5b66\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u6700\u7ec8\u8d70\u5411\u67b6\u6784\u5e08\u3002\u8bbe\u8ba1\u6a21\u5f0f\u5bb9\u6613\u8ba9\u4eba\u611f\u89c9\u975e\u5e38\u7684\u9ad8\u7ea7\u548c\u795e\u79d8\u3002 \u5176\u5b9e\u5c0f\u5510\u4e00\u76f4\u628a\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5f53\u4f5c\u5199\u4ee3\u7801\u7684\u201c\u5957\u8def\u201d\u3002\u7528\u597d\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u53ef\u4ee5\u907f\u514d\u6389\u5f88\u591a\u9879\u76ee\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u7684\u5751\u3002\u4f46\u662f\u53e6\u5916\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6ca1\u6709\u8e29\u8fc7\u5751\uff0c\u53c8\u5f88\u96be\u7406\u89e3\u8bbe\u8ba1\u6a21\u5f0f\u7684\u7cbe\u5999\u3002\u53cd\u800c\u5bb9\u6613\u88ab\u5404\u7c7b\u8bbe\u8ba1\u6a21\u5f0f\u7684\u591a\u5c42\u62bd\u8c61\u7ed9\u5f04\u6655\u3002\u6240\u4ee5\u6700\u597d\u7684\u65b9\u5f0f\uff0c\u5c31\u662f\u6839\u636e\u771f\u5b9e\u7684\u9879\u76ee\u5b66\u8bbe\u8ba1\u6a21\u5f0f\u3002\u4eca\u5929\u6211\u4eec\u5c31\u4ece\u5927\u578bC++\u5de5\u7a0b\u3001\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u4e2d\uff0c\u5b66\u4e60\u5355\u4f8b\u6a21\u5f0f\u3002","title":"\u5355\u4f8b\u6a21\u5f0f\uff1a\u4ece naive \u5230\u5de5\u4e1a\u7ea7"},{"location":"learn_cpp/04_singleton.html#_1","text":"\u5728\u5b9e\u9645\u573a\u666f\u4e2d\uff0c\u7ecf\u5e38\u6709 \u201c\u67d0\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61\u201d \u7684\u9700\u6c42\u3002\u5982\u5168\u5c4f\u6e38\u620f\u8fd0\u884c\u65f6\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u7a97\u53e3\u3001\u7cfb\u7edf\u65e5\u5fd7\u7531\u4e00\u4e2a\u65e5\u5fd7\u7ba1\u7406\u5668\u7edf\u4e00\u8bb0\u5f55\uff0c\u518d\u6bd4\u5982\uff0c\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u4e2d\u7684\u5168\u5c40\u73af\u5883\u4fe1\u606f\u3001\u7ebf\u7a0b\u6c60\u7b49\u90fd\u8bbe\u8ba1\u4e3a\u5355\u4f8b\u3002 \u300a\u8bbe\u8ba1\u6a21\u5f0f\u300b\u4e00\u4e66\u4e2d\uff0c\u7ed9\u51fa\u4e86\u5355\u4f8b\u6a21\u5f0f\u7684\u7b80\u5355\u5b9e\u73b0\uff1a // singleton.h class CSingleton { public : static CSingleton * Instance (){ if ( _instance == nullptr ){ _instance = new CSingleton ; } return _instance ; } //\u8be5\u7c7b\u7684\u5176\u5b83\u63a5\u53e3 ... protected : CSingleton (){} private : static CSingleton * _instance ; }; // singleton.cpp CSingleton * CSingleton :: _instance ; \u5b83\u7684\u5b9e\u73b0\u8981\u70b9\u662f\uff1a \u5c06\u6784\u9020\u51fd\u6570\u8bbe\u7f6e\u4e3a\u975e public \u7684\u6743\u9650 \u4f7f\u7528\u4e00\u4e2a\u7c7b\u9759\u6001\u6210\u5458\u4fdd\u5b58\u552f\u4e00\u7684\u5b9e\u4f8b \u5b9e\u73b0\u4e00\u4e2a public \u7684\u9759\u6001\u65b9\u6cd5\uff0c\u7528\u4e8e\u83b7\u53d6\u552f\u4e00\u7684\u5bf9\u8c61\u5b9e\u4f8b \u4f46\u662f\uff0c\u8fd9\u79cd\u793a\u4f8b\u4ee3\u7801\uff0c\u4ecd\u7136\u6709\u4e00\u4e9b\u7f3a\u9677\u3002\u6bd4\u5982\u62f7\u8d1d\u6784\u9020\u3001\u79fb\u52a8\u6784\u9020\u8fd8\u672adelete\uff0c\u6240\u4ee5\u7528\u6237\u53ef\u80fd\u6709\u5176\u5b83\u65b9\u5f0f\u6784\u9020\u5bf9\u8c61\u5b9e\u4f8b\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\u81ea\u5df1\u6ce8\u610f\u548c\u4fee\u6539\u3002 \u66f4\u91cd\u8981\u7684\u662f\uff0c\u5b83\u8fd8\u5176\u5b83\u7f3a\u9677\uff0c\u6ee1\u8db3\u4e0d\u4e86\u5de5\u4e1a\u7ea7\u7684\u9700\u6c42\uff1a \u4e0d\u540c\u7684\u7c7b\u60f3\u8981\u53d8\u6210\u5355\u4f8b\uff0c\u90fd\u9700\u8981\u91cd\u590d\u6dfb\u52a0 Instance \u65b9\u6cd5\u53ca\u9759\u6001\u6210\u5458\uff0c\u6bd4\u8f83\u5197\u4f59\u3002 \u4e0d\u80fd\u5904\u7406\u4e00\u4e2a\u7c7b\u7684\u6784\u9020\u5b58\u5728\u91cd\u8f7d\u7684\u60c5\u51b5\u3002\u66f4\u6ca1\u6709\u529e\u6cd5\u7edf\u4e00\u4f18\u96c5\u5730\u89e3\u51b3\u4e0d\u540c\u7c7b\u7684\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u4e2a\u6570\u3001\u53c2\u6570\u7c7b\u578b\u53ef\u80fd\u4e0d\u540c\u7684\u95ee\u9898\u3002\u8fd9\u4e2a\u7248\u672c\u76f4\u63a5\u56de\u907f\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e3e\u4f8b\u7528\u7684\u662f\u65e0\u53c2\u6784\u9020\u3002 \u65e0\u6cd5\u7cbe\u786e\u63a7\u5236\u5355\u4f8b\u5bf9\u8c61\u7684\u987a\u5e8f\u4f9d\u8d56\u5173\u7cfb\u3002\u6bd4\u5982\u5efa\u5efa\u5b66\u6821\uff0c\u8981\u5148\u6709\u6821\u957f\u3002\u8fd9\u5c31\u5fc5\u9700\u4fdd\u8bc1\u6821\u957f\u5728\u5b66\u6821\u6784\u9020\u524d\u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\u3002 \u4f46\u662f\u8fd9\u4e2a\u6734\u7d20\u7248\u672c\uff0c\u628a\u521b\u5efa\u5bf9\u8c61\u548c\u83b7\u53d6\u5bf9\u8c61\u7684\u903b\u8f91\u653e\u5728\u4e86\u4e00\u8d77\uff0c\u65e0\u6cd5\u7cbe\u786e\u63a7\u5236\u5355\u4f8b\u7684\u751f\u547d\u5468\u671f\u3002 \u6211\u4eec\u770b\u770b OneFlow \u4e2d\u662f\u600e\u4e48\u514b\u670d\u4ee5\u4e0a\u7f3a\u9677\u7684\u3002","title":"\u4ec0\u4e48\u662f\u5355\u4f8b\u6a21\u5f0f"},{"location":"learn_cpp/04_singleton.html#oneflow","text":"OneFlow \u7684\u5355\u4f8b\u6a21\u5f0f\u4ee3\u7801\u5728 global.h \u4e2d\u3002\u5b83\u7684\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff08\u6211\u7b80\u5316\u4e86\u548c\u5f02\u5e38\u5904\u7406\u3001\u9519\u8bef\u68c0\u67e5\u7b49\u4ee3\u7801\uff09\uff1a template < typename T > class Global final { public : static T * Get () { return * GetPPtr (); } template < typename ... Args > static void New ( Args && ... args ) { CHECK ( Get () == nullptr ); //\u4e0d\u4e3a nullptr \u5c06\u629b\u5f02\u5e38 * GetPPtr () = new T ( std :: forward < Args > ( args )...); } static void Delete () { if ( Get () != nullptr ) { delete Get (); * GetPPtr () = nullptr ; } } private : static T ** GetPPtr () { static T * ptr = nullptr ; return & ptr ; } }; \u6211\u4eec\u770b\u5230\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e09\u4e2a\u91cd\u8981\u7684\u516c\u5f00\u65b9\u6cd5\uff1a New \u3001 Get \u3001 Delete \u3002\u5176\u4e2d New \u662f\u7528\u6765\u5b9e\u4f8b\u5316\u5355\u4f8b\u3001 Delete \u7528\u6765\u9500\u6bc1\u5355\u4f8b\u3001 Get \u7528\u6765\u83b7\u53d6\u5168\u5c40\u552f\u4e00\u7684\u5355\u4f8b\u5bf9\u8c61\u3002 \u6211\u4eec\u770b\u5230\uff0c\u4e0e\u4e4b\u524d\u6734\u7d20\u7248\u672c\u7684\u5355\u4f8b\u6a21\u5f0f\u76f8\u6bd4\uff0c Global \u4e13\u95e8\u8bbe\u8ba1\u4e86 New \u63a5\u53e3\u548c Delete \u63a5\u53e3\u3002\u5b83\u7684\u597d\u5904\u5728\u4e8e\uff0c\u4e0d\u518d\u628a\u5355\u4f8b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u4ea4\u7ed9\u8fd0\u884c\u65f6\u548c\u7f16\u8bd1\u5668\u3002\u800c\u662f\u53ef\u4ee5\u975e\u5e38\u7cbe\u786e\u5730\u63a7\u5236\u5355\u4f8b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u3002 \u6bd4\u5982\u8fd9\u91cc\u7684\u4ee3\u7801\uff0c\u8fd9\u4e2a\u7ebf\u7a0b\u6c60\u5355\u4f8b\uff0c\u5c31\u4f9d\u8d56\u4e86 ResourceDesc \u5355\u4f8b\u3002\u56e0\u4e3a\u53ef\u4ee5\u7cbe\u786e\u63a7\u5236\u751f\u547d\u5468\u671f\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u4fdd\u7ebf\u7a0b\u6c60\u5b9e\u4f8b\u5316\u65f6\uff0c ResourceDesc \u5df2\u7ecf\u5b58\u5728\u4e86\u3002 Global < ThreadPool >:: New ( Global < ResourceDesc , ForSession >:: Get () -> ComputeThreadPoolSize ());","title":"OneFlow \u4e2d\u7684\u5de5\u4e1a\u7ea7\u5355\u4f8b\u6a21\u5f0f"},{"location":"learn_cpp/04_singleton.html#new","text":"\u6211\u4eec\u770b\u770b New \u63a5\u53e3\u7684\u5b9e\u73b0\u3002\u5df2\u7ecf\u638c\u63e1\u4e86\u5b8c\u7f8e\u8f6c\u53d1\u548c\u53d8\u53c2\u6a21\u677f\u7684\u540c\u5b66\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u770b\u61c2\uff0c\u8fd9\u91cc\u5c31\u662f\u505a\u4e86\u4e00\u4e2a\u5b8c\u7f8e\u8f6c\u53d1\uff0c \u5e76\u4e14\u652f\u6301\u4efb\u610f\u4e2a\u6570\u3001\u4efb\u610f\u7c7b\u578b\u53c2\u6570\u7684\u8f6c\u53d1\u3002\u8fd9\u4f7f\u5f97 OneFlow \u7684\u5355\u4f8b\u975e\u5e38\u7075\u6d3b\uff0c\u53ef\u4ee5\u7528 New \u63a5\u53e3\u7edf\u4e00\u5730\u521b\u5efa\u5404\u79cd\u5404\u6837\u7684\u7c7b\u3002 template < typename ... Args > static void New ( Args && ... args ) { CHECK ( Get () == nullptr ); //\u4e0d\u4e3a nullptr \u5c06\u629b\u5f02\u5e38 * GetPPtr () = new T ( std :: forward < Args > ( args )...); } \u4e0d\u8fc7\u521b\u5efa\u597d\u7684\u5bf9\u8c61\u653e\u54ea\u53bb\u4e86\u5462\uff1f\u8fd9\u548c\u65b9\u6cd5 GetPPtr \u6709\u5173\u7cfb\u3002\u8bfb\u61c2 GetPPtr \u7684\u5b9e\u73b0\uff0c\u7275\u6d89\u5230\u4e8c\u7ea7\u6307\u9488\u7684\u4f7f\u7528\u6280\u5de7\u3002 static T ** GetPPtr () { static T * ptr = nullptr ; return & ptr ; } \u719f\u6089\u547d\u540d\u89c4\u8303\u7684\u540c\u5b66\u77e5\u9053\uff0c\u5176\u5b9e GetPPtr \u7684\u540d\u5b57\u5c31\u6697\u793a\u4e86\u5b83\u548c\u4e8c\u7ea7\u6307\u9488\u6709\u5173\u3002\u6211\u4eec\u770b GetPPtr \u4e2d\uff0c\u51c6\u5907\u4e86\u4e00\u4e2a\u9759\u6001\u53d8\u91cf\uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u9488\u3002\u4f46\u662f\u8fd9\u4e2a\u51fd\u6570\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u9759\u6001\u53d8\u91cf\u3002\u800c\u662f\u8fd4\u56de\u8fd9\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u3002\u56e0\u6b64\u8fd9\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u662f \u4e8c\u7ea7\u6307\u9488 \u3002 \u800c\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u8fc7\u7a0b\uff0c\u5c31\u9700\u8981\u5148\u5b9a\u4f4d\u5230\u8fd9\u4e2a\u9759\u6001\u53d8\u91cf\u3002\u7136\u540e\u628a\u521b\u5efa\u7684\u5bf9\u8c61\u5730\u5740\u7ed9\u653e\u8fdb\u53bb\u3002 * GetPPtr () = new T ( std :: forward < Args > ( args )...); \u83b7\u53d6\u5355\u4f8b\u65f6\u4e5f\u7c7b\u4f3c\uff0c\u662f\u5148\u901a\u8fc7 GetPPtr \u5b9a\u4f4d\u5230\u4e86\u90a3\u4e2a\u9759\u6001\u53d8\u91cf\u3002\u7136\u540e\u901a\u8fc7\u89e3\u5f15\u7528\uff0c\u5f97\u5230\u9759\u6001\u53d8\u91cf\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u5355\u4f8b\u5bf9\u8c61\u7684\u5730\u5740\u3002 static T * Get () { return * GetPPtr (); }","title":"New \u63a5\u53e3\u5b9e\u73b0"},{"location":"learn_cpp/04_singleton.html#_2","text":"\u5728\u4e0d\u5c11\u5355\u4f8b\u6a21\u5f0f\u7684\u793a\u8303\u4e2d\uff0c\u90fd\u559c\u6b22\u5728\u5355\u4f8b\u8bbe\u8ba1\u4e2d\uff0c \u7edf\u4e00\u5904\u7406\u591a\u7ebf\u7a0b\u540c\u6b65\u95ee\u9898 \u3002\u5176\u5b9e\u8fd9\u5f88\u5bb9\u6613\u5e26\u6765\u6027\u80fd\u7684\u635f\u5931\u3002\u5b9e\u9645\u4e0a\uff0c\u540c\u6b65\u95ee\u9898\u548c\u5355\u4f8b\u6a21\u5f0f\u662f2\u4e2a\u72ec\u7acb\u7684\u95ee\u9898\uff0c\u5c0f\u7cd6\u8ba4\u4e3a\u6700\u597d\u4e0d\u8981\u5c06\u4ed6\u4eec\u6df7\u4e3a\u4e00\u8c08\u3002\u540c\u6b65\u95ee\u9898\u5e94\u8be5\u662f\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5bf9\u5f85\u7684\u3002 \u4ee5 OneFlow \u4e3a\u4f8b\uff0c\u6240\u6709 Global \u5355\u4f8b\u5bf9\u8c61\u7684\u521b\u5efa\u548c\u9500\u6bc1\u90fd\u5728\u4e3b\u7ebf\u7a0b\u91cc\uff0c\u5e76\u4e0d\u5b58\u5728\u5e76\u53d1\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u7279\u522b\u7684\u540c\u6b65\u64cd\u4f5c\u3002\u5728 OneFlow \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c Global \u5355\u4f8b\u7c7b\u4e2d\u7684\u67d0\u4e00\u4e2a\u6210\u5458\u5b58\u5728\u5e76\u53d1\u95ee\u9898\uff0c\u90a3\u5c31\u5355\u72ec\u5bf9\u90a3\u4e2a\u6210\u5458\u52a0\u9501\u89e3\u51b3\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u901a\u5e38\u7684\u7f16\u7a0b\u5b9e\u8df5\u4e2d\uff0c\u9501\u7684\u7c92\u5ea6\u8981\u5c3d\u53ef\u80fd\u5c0f\u3002","title":"\u5355\u4f8b\u7684\u540c\u6b65\u95ee\u9898"},{"location":"learn_cpp/04_singleton.html#_3","text":"\u603b\u7ed3\u8d77\u6765\uff0c OneFlow \u8fd9\u79cd\u5de5\u4e1a\u7ea7\u4ee3\u7801\u91cc\u7684\u5355\u4f8b\u6a21\u5f0f\u6709\u4ee5\u4e0b\u4f18\u52bf\uff1a \u4efb\u610f\u4e00\u4e2a\u7c7b\u90fd\u53ef\u4ee5\u901a\u8fc7 Global \u6a21\u677f\u6210\u4e3a\u5355\u4f8b \u53ef\u4ee5\u7528\u7edf\u4e00\u7684 New \u63a5\u53e3\u521b\u5efa\u5404\u79cd\u7c7b\u5355\u4f8b\u3001\u5e76\u652f\u6301\u6784\u9020\u91cd\u8f7d \u53ef\u4ee5\u7cbe\u786e\u5730\u63a7\u5236\u5355\u4f8b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u548c\u4f9d\u8d56\u5173\u7cfb \u628a\u7ec6\u7c92\u5ea6\u5730\u89e3\u51b3\u540c\u6b65\u95ee\u9898\u7684\u6743\u529b\u4ea4\u7ed9\u4e86\u5f00\u53d1\u8005","title":"\u603b\u7ed3"}]}